//======================================================================================================================
// Cost and usage data
//
// Supported versions:
// - Azure: 1.0, 1.0-preview(v1) -- See https://aka.ms/costmgmt/exports/focus
// - AWS: 1.0                    -- See https://docs.aws.amazon.com/cur/latest/userguide/table-dictionary-focus-1-0-aws-columns.html
// - GCP: Jan-Jun 2024           -- See https://cloud.google.com/resources/google-cloud-focus?e=48754805&hl=en
// - OCI: 1.0                    -- See https://docs.oracle.com/iaas/Content/Billing/Concepts/costusagereportsoverview.htm#costreports__focus-cost-report-schema
//======================================================================================================================

.create-merge table FocusCost_raw (
    AvailabilityZone:           string,
    BilledCost:                 decimal,
    BillingAccountId:           string,
    BillingAccountName:         string,
    BillingAccountType:         string,    // Azure 1.0-preview(v1)+
    BillingCurrency:            string,
    BillingPeriodEnd:           datetime,
    BillingPeriodStart:         datetime,
    ChargeCategory:             string,
    ChargeClass:                string,
    ChargeDescription:          string,
    ChargeFrequency:            string,
    ChargePeriodEnd:            datetime,
    ChargePeriodStart:          datetime,
    CommitmentDiscountCategory: string,
    CommitmentDiscountId:       string,
    CommitmentDiscountName:     string,
    CommitmentDiscountStatus:   string,
    CommitmentDiscountType:     string,
    ConsumedQuantity:           decimal,
    ConsumedUnit:               string,
    ContractedCost:             decimal,
    ContractedUnitPrice:        decimal,
    EffectiveCost:              decimal,
    InvoiceIssuerName:          string,
    ListCost:                   decimal,
    ListUnitPrice:              decimal,
    PricingCategory:            string,
    PricingQuantity:            decimal,
    PricingUnit:                string,
    ProviderName:               string,
    PublisherName:              string,
    Region:                     string,    // FOCUS 1.0-preview only
    RegionId:                   string,
    RegionName:                 string,
    ResourceId:                 string,
    ResourceName:               string,
    ResourceType:               string,
    ServiceCategory:            string,
    ServiceName:                string,
    SkuId:                      string,
    SkuPriceId:                 string,
    SubAccountId:               string,
    SubAccountName:             string,
    SubAccountType:             string,
    Tags:                       string,
    UsageAmount:                decimal,   // GCP Jan 2024 -- Removed Mar 2024 (UsageQuantity)
    UsageQuantity:              decimal,   // FOCUS 1.0-preview only
    UsageUnit:                  string,    // FOCUS 1.0-preview only
    x_AccountId:                string,    // Azure 1.0-preview(v1)+
    x_AccountName:              string,    // Azure 1.0-preview(v1)+
    x_AccountOwnerId:           string,    // Azure 1.0-preview(v1)+
    x_BilledCostInUsd:          decimal,   // Azure 1.0-preview(v1)+
    x_BilledUnitPrice:          decimal,   // Azure 1.0-preview(v1)+
    x_BillingAccountId:         string,    // Azure 1.0-preview(v1)+
    x_BillingAccountName:       string,    // Azure 1.0-preview(v1)+
    x_BillingExchangeRate:      decimal,   // Azure 1.0-preview(v1)+
    x_BillingExchangeRateDate:  datetime,  // Azure 1.0-preview(v1)+
    x_BillingProfileId:         string,    // Azure 1.0-preview(v1)+
    x_BillingProfileName:       string,    // Azure 1.0-preview(v1)+
    x_ChargeId:                 string,    // Azure 1.0-preview(v1) only
    x_ContractedCostInUsd:      decimal,   // Azure 1.0+
    x_Cost:                     decimal,   // GCP Jan 2024 -- Removed Jun 2024 (ContractedCost)
    x_CostAllocationRuleName:   string,    // Azure 1.0-preview(v1)+
    x_CostCategories:           string,    // AWS 1.0 (JSON)
    x_CostCenter:               string,    // Azure 1.0-preview(v1)+
    x_Credits:                  string,    // GCP Jan 2024
    x_CostType:                 string,    // GCP Jan 2024
    x_CurrencyConversionRate:   decimal,   // GCP Jun 2024
    x_CustomerId:               string,    // Azure 1.0-preview(v1)+
    x_CustomerName:             string,    // Azure 1.0-preview(v1)+
    x_Discount:                 string,    // AWS 1.0 (JSON)
    x_EffectiveCostInUsd:       decimal,   // Azure 1.0-preview(v1)+
    x_EffectiveUnitPrice:       decimal,   // Azure 1.0-preview(v1)+
    x_ExportTime:               datetime,  // GCP Jan 2024
    x_InvoiceId:                string,    // Azure 1.0-preview(v1)+
    x_InvoiceIssuerId:          string,    // Azure 1.0-preview(v1)+
    x_InvoiceSectionId:         string,    // Azure 1.0-preview(v1)+
    x_InvoiceSectionName:       string,    // Azure 1.0-preview(v1)+
    x_ListCostInUsd:            decimal,   // Azure 1.0-preview(v1)+
    x_Location:                 string,    // GCP Jan 2024
    x_OnDemandCost:             decimal,   // Azure 1.0-preview(v1) only
    x_OnDemandCostInUsd:        decimal,   // Azure 1.0-preview(v1) only
    x_OnDemandUnitPrice:        decimal,   // Azure 1.0-preview(v1) only
    x_Operation:                string,    // AWS 1.0
    x_PartnerCreditApplied:     string,    // Azure 1.0-preview(v1)+
    x_PartnerCreditRate:        string,    // Azure 1.0-preview(v1)+
    x_PricingBlockSize:         decimal,   // Azure 1.0-preview(v1)+
    x_PricingCurrency:          string,    // Azure 1.0-preview(v1)+
    x_PricingSubcategory:       string,    // Azure 1.0-preview(v1)+
    x_PricingUnitDescription:   string,    // Azure 1.0-preview(v1)+
    x_Project:                  string,    // GCP Jan 2024
    x_PublisherCategory:        string,    // Azure 1.0-preview(v1)+
    x_PublisherId:              string,    // Azure 1.0-preview(v1)+
    x_ResellerId:               string,    // Azure 1.0-preview(v1)+
    x_ResellerName:             string,    // Azure 1.0-preview(v1)+
    x_ResourceGroupName:        string,    // Azure 1.0-preview(v1)+
    x_ResourceType:             string,    // Azure 1.0-preview(v1)+
    x_ServiceCode:              string,    // AWS 1.0
    x_ServiceId:                string,    // GCP Jan 2024
    x_ServicePeriodEnd:         datetime,  // Azure 1.0-preview(v1)+
    x_ServicePeriodStart:       datetime,  // Azure 1.0-preview(v1)+
    x_SkuDescription:           string,    // Azure 1.0-preview(v1)+
    x_SkuDetails:               string,    // Azure 1.0-preview(v1)+
    x_SkuIsCreditEligible:      bool,      // Azure 1.0-preview(v1)+ 
    x_SkuMeterCategory:         string,    // Azure 1.0-preview(v1)+
    x_SkuMeterId:               string,    // Azure 1.0-preview(v1)+
    x_SkuMeterName:             string,    // Azure 1.0-preview(v1)+
    x_SkuMeterSubcategory:      string,    // Azure 1.0-preview(v1)+
    x_SkuOfferId:               string,    // Azure 1.0-preview(v1)+
    x_SkuOrderId:               string,    // Azure 1.0-preview(v1)+
    x_SkuOrderName:             string,    // Azure 1.0-preview(v1)+
    x_SkuPartNumber:            string,    // Azure 1.0-preview(v1)+
    x_SkuRegion:                string,    // Azure 1.0-preview(v1)+
    x_SkuServiceFamily:         string,    // Azure 1.0-preview(v1)+
    x_SkuTerm:                  string,    // Azure 1.0-preview(v1)+
    x_SkuTier:                  string,    // Azure 1.0-preview(v1)+ 
    x_UsageType:                string     // AWS 1.0
)

// Costs as FOCUS 1.0
.create-or-alter function
with (docstring = 'All costs transformed to FOCUS 1.0.', folder = 'Costs')
Costs_1_0()
{
    FocusCost_raw
    | extend IngestionTime = ingestion_time()
    // TODO: Transform 1.0-preview(v1) to 1.0
    | summarize arg_max(IngestionTime , *) by
        BillingAccountId, ChargePeriodStart, CommitmentDiscountId, RegionId, ResourceId, SkuPriceId, SubAccountId,
        x_AccountOwnerId, x_CostCenter, x_InvoiceSectionId, x_SkuDetails, x_SkuMeterId, x_SkuOfferId
}

// Costs as FOCUS 1.0 preview
.create-or-alter function
with (docstring = 'All costs transformed to FOCUS 1.0 preview.', folder = 'Costs')
Costs_1_0_preview()
{
    FocusCost_raw
    | extend IngestionTime = ingestion_time()
    // TODO: Transform 1.0 to 1.0-preview(v1)
    | summarize arg_max(IngestionTime , *) by
        BillingAccountId, ChargePeriodStart, CommitmentDiscountId, Region, ResourceId, SkuPriceId, SubAccountId, 
        x_AccountOwnerId, x_CostCenter, x_InvoiceSectionId, x_SkuDetails, x_SkuMeterId, x_SkuOfferId
}


//======================================================================================================================
// Prices
//======================================================================================================================

// Azure EA -- https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/price-sheet-ea
// Azure MCA -- https://learn.microsoft.com/azure/cost-management-billing/dataset-schema/price-sheet-mca
.create-merge table PriceSheet_raw (
    BasePrice:          decimal,
    BillingAccountId:   string,
    BillingAccountName: string,
    BillingCurrency:    string,
    BillingProfileId:   string,
    BillingProfileName: string,
    Currency:           string,
    CurrencyCode:       string,
    EffectiveEndDate:   datetime,
    EffectiveStartDate: datetime,
    EnrollmentNumber:   string,
    IncludedQuantity:   decimal,
    MarketPrice:        decimal,
    MeterCategory:      string,
    MeterId:            string,
    MeterID:            string,
    MeterName:          string,
    MeterRegion:        string,
    MeterSubCategory:   string,
    MeterType:          string,
    OfferID:            string,
    PartNumber:         string,
    PriceType:          string,
    PricingCurrency:    string,
    Product:            string,
    ProductName:        string,
    ProductId:          string,
    ProductID:          string,
    ServiceFamily:      string,
    SkuId:              string,
    SkuID:              string,
    Term:               string,
    TierMinimumUnits:   decimal,
    UnitOfMeasure:      string,
    UnitPrice:          decimal
)

// Prices as FOCUS 1.0
.create-or-alter function
with (docstring='All prices transformed to FOCUS 1.0.', folder='Prices')
Prices_1_0()
{
    // TODO: Handle null MeterId
    // TODO: Add PricingUnit and x_PricingBlockSize
    // TODO: Add x_CommitmentDiscountMinimum (as in the minimum commitment amount; e.g., 100TB, 1PB, 10PB for storage)
    // TODO: Consider cleaning up x_SkuRegion
    // TODO: Create new rows for reservation usage rows?
    // TODO: Why is MeterName missing for some records (e.g., reservations)?
    // TODO: Why is MarketPrice not the on-demand list price for savings plan prices?
    // TODO: Why is MarketPrice ~= UnitPrice (but not ==) for savings plan prices?
    // TODO: Does ListUnitPrice/x_EffectiveUnitPrice match usage data for savings plans?
    // TODO: Does x_SkuMeterName match usage data?
    // TODO: Does the effective start date for reservation prices change based on the export date?
    let isoMonths = (duration: string) {
        let number = toint(replace_regex(duration, @'[PMY]', ''));
        case(
            duration == '', toint(''),
            duration endswith "Y", number * 12,
            duration endswith "M", number,
            -1
        )
    };
    let prices = PriceSheet_raw
    | extend x_SkuMeterId = coalesce(MeterId, MeterID)
    | project-rename
        x_BaseUnitPrice = BasePrice,
        x_SkuIncludedQuantity = IncludedQuantity,
        x_SkuMeterName = MeterName,
        x_SkuMeterSubcategory = MeterSubCategory,
        x_SkuMeterType = MeterType,
        x_SkuOfferId = OfferID,
        x_SkuPartNumber = PartNumber,
        x_SkuPriceType = PriceType,
        x_SkuRegion = MeterRegion,
        x_SkuServiceFamily = ServiceFamily,
        x_SkuTier = TierMinimumUnits
    | extend ContractedUnitPrice = iff(x_SkuPriceType != 'SavingsPlan', UnitPrice, todecimal(''))  // UnitPrice for savings plan is not the on-demand unit price
    | extend ListUnitPrice = iff(x_SkuPriceType != 'SavingsPlan', MarketPrice, todecimal(''))  // MarketPrice for savings plan is not the list price
    | extend SkuPriceIdv2 = strcat(x_SkuMeterId, '_', case(x_SkuPriceType == 'Consumption', 'OD', x_SkuPriceType == 'ReservedInstance', 'RI', x_SkuPriceType == 'SavingsPlan', 'SP', 'XX'), '_', coalesce(ProductId, ProductID), '_', coalesce(SkuId, SkuID), '_', Term, '_', x_SkuTier, '_', x_SkuOfferId) //MeterType, '_',
    | extend x_BillingAccountId = iff(BillingAccountId startswith '/', split(BillingAccountId, '/')[-1], coalesce(BillingAccountId, EnrollmentNumber))
    | extend x_BillingProfileId = iff(BillingProfileId startswith '/', split(BillingProfileId, '/')[-1], coalesce(BillingProfileId, EnrollmentNumber))
    | extend x_IngestionTime = ingestion_time()
    | extend x_SkuSavingsPlanKey = strcat(coalesce(MeterId, MeterID), '_', coalesce(ProductId, ProductID), '_', coalesce(SkuId, SkuID), '_', x_SkuTier, '_', x_SkuOfferId);  //MeterType, '_';
    //
    // Prices by type
    let ri = prices | where x_SkuPriceType == 'ReservedInstance';
    let sp = prices | where x_SkuPriceType == 'SavingsPlan';
    let od = prices | where x_SkuPriceType == 'Consumption';
    //
    // Meters for reservations and savings plans to identify commitment eligibility
    let riMeters = ri | distinct x_SkuMeterId;
    let spMeters = sp | distinct x_SkuMeterId;
    //
    // On-demand prices for savings plan meters only to streamline the join
    let odForSP = od | where x_SkuMeterId in (sp) | distinct x_SkuSavingsPlanKey, ListUnitPrice, ContractedUnitPrice, x_BaseUnitPrice;
    od
    | union (ri)
    | union ((
        // Copy list/base/contracted prices from on-demand SKUs
        sp
        | join kind=leftouter (odForSP) on x_SkuSavingsPlanKey
        | extend ListUnitPrice = coalesce(ListUnitPrice, ListUnitPrice1)
        | extend ContractedUnitPrice = coalesce(ContractedUnitPrice, ContractedUnitPrice1)
        | extend x_BaseUnitPrice = coalesce(x_BaseUnitPrice, x_BaseUnitPrice1)
        | project-away ListUnitPrice1, ContractedUnitPrice1, x_BaseUnitPrice1
    ))
    // 
    // Calculate commitment discount elgibility
    | extend usage = x_SkuMeterId in (riMeters)
    | extend spend = x_SkuMeterId in (spMeters)
    | extend x_CommitmentDiscountEligibility = case(usage and spend, 'Usage or Spend', usage, 'Usage', spend, 'Spend', 'Not Eligible')
    //
    // Get latest ingested row based on the unique ID
    | summarize arg_max(x_IngestionTime , *) by SkuPriceIdv2
    | extend x_EffectiveUnitPrice = iff(x_SkuPriceType == 'SavingsPlan', UnitPrice, todecimal(''))  // Savings plan prices are for the effective price, not the contracted price
    | extend x_CommitmentUnitPriceSavings = ContractedUnitPrice - x_EffectiveUnitPrice
    | extend x_NegotiatedUnitPriceSavings = ListUnitPrice - ContractedUnitPrice
    | extend x_TotalUnitPriceSavings = ListUnitPrice - x_EffectiveUnitPrice
    | project
        BillingAccountId = case(
            BillingProfileId startswith '/', BillingProfileId,
            BillingAccountId startswith '/', BillingAccountId,
            strcat('/providers/Microsoft.Billing/billingAccounts/', x_BillingAccountId, iff(x_BillingProfileId != x_BillingAccountId, '', strcat('/billingProfiles/', x_BillingProfileId)))
        ),
        BillingAccountName = coalesce(BillingProfileName, BillingAccountName, x_BillingProfileId),
        BillingCurrency = coalesce(BillingCurrency, CurrencyCode, Currency),  // Currency last as a fallback only
        ChargeCategory = case(
            x_SkuPriceType == 'Consumption', 'Usage',
            x_SkuPriceType == 'ReservedInstance', 'Purchase',
            x_SkuPriceType == 'SavingsPlan', 'Usage',  // Savings plan prices are for committed usage, not the purchase
            ''
        ),
        CommitmentDiscountCategory = case(
            x_SkuPriceType == 'ReservedInstance', 'Usage',
            x_SkuPriceType == 'SavingsPlan', 'Spend',
            ''
        ),
        CommitmentDiscountType = case(
            x_SkuPriceType == 'ReservedInstance', 'Reservation',
            x_SkuPriceType == 'SavingsPlan', 'Savings plan',
            ''
        ),
        ContractedUnitPrice,
        ListUnitPrice,
        PricingCategory = case(
            x_SkuPriceType == 'Consumption', 'Standard',
            x_SkuPriceType == 'ReservedInstance', 'Standard',  // Reservation purchases are tracked as "Standard"
            x_SkuPriceType == 'SavingsPlan', 'Committed',
            ''
        ),
        SkuId = coalesce(ProductId, ProductID),
        SkuIdv2 = x_SkuMeterId,
        SkuPriceId = strcat(coalesce(ProductId, ProductID), '_', coalesce(SkuId, SkuID), '_', x_SkuMeterType),
        SkuPriceIdv2, 
        x_AccountType = case(
            strlen(x_BillingAccountId) > 32, 'MCA',
            strlen(x_BillingAccountId) < 32, 'EA',
            'Unknown'
        ),
        x_BaseUnitPrice,
        x_BillingAccountId,
        x_BillingProfileId,
        x_CommitmentDiscountEligibility,
        x_CommitmentUnitPriceSavings,
        x_CommitmentUnitPriceSavingsPercent = 1.0 * x_CommitmentUnitPriceSavings / ContractedUnitPrice * 100,
        x_DatasetType = 'PriceSheet',
        x_DatasetVersion = '2023-05-01',
        x_EffectivePeriodEnd = EffectiveEndDate,
        x_EffectivePeriodStart = EffectiveStartDate,
        x_EffectiveUnitPrice,
        x_IngestionTime,
        x_NegotiatedUnitPriceSavings,
        x_NegotiatedUnitPriceSavingsPercent = 1.0 * x_NegotiatedUnitPriceSavings / ListUnitPrice * 100,
        x_PricingCurrency = coalesce(PricingCurrency, Currency, CurrencyCode),  // CurrencyCode last as a fallback only
        x_PricingSubcategory = case(
            // TODO: Change to TierMinimumUnits > 0
            x_SkuPriceType == 'Consumption' and (x_SkuIncludedQuantity > 0 or isnotempty(x_SkuTier)), 'Tiered',
            x_SkuPriceType == 'Consumption', 'Standard',
            x_SkuPriceType == 'ReservedInstance', 'Standard', // Reservation purchases are tracked as "Standard"
            x_SkuPriceType == 'SavingsPlan', 'Committed Spend',
            ''
        ),
        x_PricingUnitDescription = UnitOfMeasure,
        x_SkuDescription = coalesce(Product, ProductName),
        x_SkuId = coalesce(SkuId, SkuID),
        x_SkuIncludedQuantity,
        x_SkuMeterCategory = MeterCategory,
        x_SkuMeterId,
        x_SkuMeterName,
        x_SkuMeterSubcategory,
        x_SkuMeterType,
        x_SkuPriceType,
        x_SkuProductId = coalesce(ProductId, ProductID),
        x_SkuRegion,
        x_SkuSavingsPlanKey, 
        x_SkuServiceFamily,
        x_SkuOfferId,
        x_SkuPartNumber,
        x_SkuTerm = isoMonths(Term),
        x_SkuTier,
        x_TotalUnitPriceSavings,
        x_TotalUnitPriceSavingsPercent = 1.0 * x_TotalUnitPriceSavings / ListUnitPrice * 100
    | order by SkuPriceIdv2 asc
}


//======================================================================================================================
// Recommendations
//======================================================================================================================

.create-merge table Recommendations_raw (
    ResourceId:                          string,
    ResourceName:                        string,
    _ResourceType:                       string,
    _RecommendationCategory:             string,
    _RecommendationProvider:             string,
    _RecommendationId:                   string,
    _RecommendationDescription:          string,
    _RecommendationSolution:             string,
    _RecommendationTypeId:               string,
    SubAccountId:                        string,
    SubAccountName:                      string,
    x_RecommendationImpact:              string,
    x_RecommendationControl:             string,
    x_RecommendationMaturityLevel:       string,
    x_RecommendationDetails:             dynamic,
    x_RecommendationDate:                datetime,
    x_ResourceGroupName:                 string
)

.create-or-alter function
with (docstring = 'All recommendations transformed to FOCUS 1.0.', folder = 'Recommendations')
Recommendations_1_0()
{
    Recommendations_raw
    | extend IngestionTime = ingestion_time()
    | summarize arg_max(IngestionTime , *) by
        _RecommendationId, SubAccountId, SubAccountName, x_ResourceGroupName, ResourceId, ResourceName, _ResourceType, _RecommendationCategory, _RecommendationProvider, _RecommendationTypeId
}


//======================================================================================================================
// Reservation details
//======================================================================================================================

.create-merge table ReservationDetails_raw (
    InstanceFlexibilityGroup: string,
    InstanceFlexibilityRatio: decimal,
    InstanceId:               string,
    Kind:                     string,
    ReservationId:            string,
    ReservationOrderId:       string,
    ReservedHours:            decimal,
    SkuName:                  string,
    TotalReservedQuantity:    decimal,
    UsageDate:                datetime,
    UsedHours:                decimal
)

.create-or-alter function
with (docstring = 'All reservation details transformed to FOCUS 1.0.', folder = 'CommitmentDiscounts')
ReservationDetails_1_0()
{
    // TODO: Transform to FOCUS 1.0
    ReservationDetails_raw
    | extend IngestionTime = ingestion_time()
    | summarize arg_max(IngestionTime , *) by
        ResourceId = InstanceId,
        CommitmentDiscountId = ReservationId,
        x_SkuOrderId = ReservationOrderId,
        x_SkuType = SkuName
}

//======================================================================================================================
// Reservation recommendations
//======================================================================================================================

.create-merge table ReservationRecommendations_raw (
    CostWithNoReservedInstances:    string,
    FirstUsageDate:                 datetime,
    InstanceFlexibilityGroup:       string,
    InstanceFlexibilityRatio:       decimal,
    Location:                       string,
    LookBackPeriod:                 string,
    MeterId:                        string,
    NetSavings:                     decimal,
    NormalizedSize:                 string,
    RecommendedQuantity:            decimal,
    RecommendedQuantityNormalized:  decimal,
    ResourceType:                   string,
    Scope:                          string,
    SkuName:                        string,
    SkuProperties:                  string,
    Term:                           string,
    TotalCostWithReservedInstances: string
)


//======================================================================================================================
// Reservation transactions
//======================================================================================================================

.create-merge table ReservationTransactions_raw (
    AccountName:                    string,
    AccountOwnerEmail:              string,
    Amount:                         decimal,
    ArmSkuName:                     string,
    BillingFrequency:               string,
    BillingMonth:                   string,
    BillingProfileId:               string,
    BillingProfileName:             string,
    CostCenter:                     string,
    Currency:                       string,
    CurrentEnrollmentId:            string,
    DepartmentName:                 string,
    Description:                    string,
    EventDate:                      datetime,
    EventType:                      string,
    Invoice:                        string,
    InvoiceId:                      string,
    InvoiceSectionId:               string,
    InvoiceSectionName:             string,
    MonetaryCommitment:             decimal,
    Overage:                        decimal,
    PurchasingEnrollment:           string,
    PurchasingSubscriptionGuid:     string,
    PurchasingSubscriptionName:     string,
    Quantity:                       decimal,
    Region:                         string,
    ReservationOrderId:             string,
    ReservationOrderName:           string,
    Term:                           string
)
