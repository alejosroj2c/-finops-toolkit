{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "StorageUrl",
      "lineageTag": "421c1232-0e40-45a4-bc59-257ce648478c",
      "description": "Name of the Azure DataLake Gen2 storage account to pull data from.",
      "queryGroupId": "1fb330b2-9f59-44be-b498-c7be0eb0cc79",
      "text": [
        "\"https://finopshubdej33rzckeakmum.dfs.core.windows.net/ingestion\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "FileType",
      "lineageTag": "72b5bbfd-a222-4629-b5e5-0d57245f25ff",
      "queryGroupId": "1fb330b2-9f59-44be-b498-c7be0eb0cc79",
      "text": [
        "\".parquet\" meta [IsParameterQuery=true, List={\".parquet\", \".gz\"}, DefaultValue=\".parquet\", Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "RangeStart",
      "lineageTag": "90085870-f708-4bc2-90c1-3a343e88a26b",
      "queryGroupId": "1fb330b2-9f59-44be-b498-c7be0eb0cc79",
      "text": [
        "#datetime(2023, 1, 1, 0, 0, 0) meta [IsParameterQuery=true, Type=\"DateTime\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "DateTime",
      "isHidden": false
    },
    {
      "name": "RangeEnd",
      "lineageTag": "695f1d3b-7b1a-49fa-8d83-f2c25dc787de",
      "queryGroupId": "1fb330b2-9f59-44be-b498-c7be0eb0cc79",
      "text": [
        "#datetime(2024, 1, 1, 0, 0, 0) meta [IsParameterQuery=true, Type=\"DateTime\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "DateTime",
      "isHidden": false
    },
    {
      "name": "fnUnpackData",
      "lineageTag": "be4fe89e-3f7a-4dcc-bea1-76ee9a1db466",
      "queryGroupId": "1fb330b2-9f59-44be-b498-c7be0eb0cc79",
      "text": [
        "(zipData) =>",
        "let",
        "Source =",
        "        Binary.Decompress(",
        "                zipData,",
        "                Compression.GZip",
        "        ),",
        "#\"Imported\" =",
        "        Csv.Document(Source,[Delimiter=\",\", Columns=60, Encoding=1252, QuoteStyle=QuoteStyle.Csv, CsvStyle=CsvStyle.QuoteAlways]),",
        "",
        "#\"Promoted Headers\" = Table.PromoteHeaders(#\"Imported\", [PromoteAllScalars=true])",
        "in",
        "#\"Promoted Headers\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "CostDetails",
      "lineageTag": "4b9830c4-e7c7-43ee-823c-d6b15359c25f",
      "queryGroupId": "1fb330b2-9f59-44be-b498-c7be0eb0cc79",
      "text": [
        "let",
        "    // Ingest data from ADLS -- Copy \"storageUrlForPowerBI\" from hub deployment outputs",
        "    Source = AzureStorage.DataLake(StorageUrl),",
        "    #\"Filter Hidden Files1\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),",
        "    #\"Add Metric\" = Table.AddColumn(#\"Filter Hidden Files1\", \"Metric\", each List.Last(List.RemoveLastN(Text.Split([Folder Path],\"/\"), 1))),",
        "    #\"Add Date Range\" = Table.AddColumn(#\"Add Metric\", \"Range\", each List.Last(List.RemoveLastN(List.RemoveLastN(Text.Split([Folder Path],\"/\"), 1), 1) )),",
        "    #\"Split Dates\" = Table.SplitColumn(#\"Add Date Range\", \"Range\", Splitter.SplitTextByDelimiter(\"-\", QuoteStyle.Csv), {\"StartDate\", \"EndDate\"}),",
        "    #\"Changed Date Type\" = Table.TransformColumnTypes(#\"Split Dates\",{{\"StartDate\", type date}, {\"EndDate\", type date}}),",
        "    #\"Filter Files by Metric and FileType\" = Table.SelectRows(#\"Changed Date Type\", each [Metric] = \"amortizedcost\" and [Extension] = FileType),",
        "    #\"Filtered Files by Date\" = Table.SelectRows(#\"Filter Files by Metric and FileType\", each [StartDate] >= Date.StartOfMonth(Date.From(RangeStart)) and [EndDate] <= Date.EndOfMonth(Date.From(RangeEnd))),",
        "    #\"Select Content\" = Table.SelectColumns(#\"Filtered Files by Date\",{\"Content\"}),",
        "    #\"Unpack Content\" = Table.AddColumn(#\"Select Content\", \"Custom\", each if FileType = \".gz\" then fnUnpackData([Content]) else Parquet.Document([Content])),",
        "    #\"Expanded Columns\" = Table.ExpandTableColumn(#\"Unpack Content\", \"Custom\", {\"AccountName\", \"AccountOwnerId\", \"AdditionalInfo\", \"BenefitId\", \"BenefitName\", \"BillingAccountId\", \"BillingAccountName\", \"BillingCurrency\", \"BillingPeriodEndDate\", \"BillingPeriodStartDate\", \"BillingProfileId\", \"BillingProfileName\", \"ChargeType\", \"ConsumedService\", \"CostAllocationRuleName\", \"CostCenter\", \"CostInBillingCurrency\", \"CostInPricingCurrency\", \"CostInUsd\", \"Date\", \"EffectivePrice\", \"ExchangeRateDate\", \"ExchangeRatePricingToBilling\", \"Frequency\", \"InvoiceId\", \"InvoiceSectionId\", \"InvoiceSectionName\", \"IsAzureCreditEligible\", \"ResourceLocationNormalized\", \"MeterCategory\", \"MeterId\", \"MeterName\", \"MeterRegion\", \"MeterSubCategory\", \"OfferId\", \"PaygCostInBillingCurrency\", \"PaygCostInUsd\", \"PaygPrice\", \"PreviousInvoiceId\", \"PricingCurrency\", \"PricingModel\", \"PartNumber\", \"ProductId\", \"ProductName\", \"ProductOrderId\", \"ProductOrderName\", \"Provider\", \"PublisherId\", \"PublisherName\", \"PublisherType\", \"Quantity\", \"ResellerMpnId\", \"ResellerName\", \"ResourceGroupName\", \"ResourceId\", \"ResourceLocation\", \"ServiceFamily\", \"ServiceInfo1\", \"ServiceInfo2\", \"ServicePeriodEndDate\", \"ServicePeriodStartDate\", \"SubscriptionId\", \"SubscriptionName\", \"Tags\", \"Term\", \"UnitOfMeasure\", \"UnitPrice\"}, {\"AccountName\", \"AccountOwnerId\", \"AdditionalInfo\", \"BenefitId\", \"BenefitName\", \"BillingAccountId\", \"BillingAccountName\", \"BillingCurrency\", \"BillingPeriodEndDate\", \"BillingPeriodStartDate\", \"BillingProfileId\", \"BillingProfileName\", \"ChargeType\", \"ConsumedService\", \"CostAllocationRuleName\", \"CostCenter\", \"CostInBillingCurrency\", \"CostInPricingCurrency\", \"CostInUsd\", \"Date\", \"EffectivePrice\", \"ExchangeRateDate\", \"ExchangeRatePricingToBilling\", \"Frequency\", \"InvoiceId\", \"InvoiceSectionId\", \"InvoiceSectionName\", \"IsAzureCreditEligible\", \"ResourceLocationNormalized\", \"MeterCategory\", \"MeterId\", \"MeterName\", \"MeterRegion\", \"MeterSubCategory\", \"OfferId\", \"PaygCostInBillingCurrency\", \"PaygCostInUsd\", \"PaygPrice\", \"PreviousInvoiceId\", \"PricingCurrency\", \"PricingModel\", \"PartNumber\", \"ProductId\", \"ProductName\", \"ProductOrderId\", \"ProductOrderName\", \"Provider\", \"PublisherId\", \"PublisherName\", \"PublisherType\", \"Quantity\", \"ResellerMpnId\", \"ResellerName\", \"ResourceGroupName\", \"ResourceId\", \"ResourceLocation\", \"ServiceFamily\", \"ServiceInfo1\", \"ServiceInfo2\", \"ServicePeriodEndDate\", \"ServicePeriodStartDate\", \"SubscriptionId\", \"SubscriptionName\", \"Tags\", \"Term\", \"UnitOfMeasure\", \"UnitPrice\"}),",
        "    #\"Removed Content\" = Table.RemoveColumns(#\"Expanded Columns\",{\"Content\"}),",
        "    #\"Detect Column Types\" = Table.TransformColumnTypes(#\"Removed Content\",{{\"AccountName\", type text}, {\"AccountOwnerId\", type text}, {\"AdditionalInfo\", type text}, {\"BenefitId\", type any}, {\"BenefitName\", type any}, {\"BillingAccountId\", Int64.Type}, {\"BillingAccountName\", type text}, {\"BillingCurrency\", type text}, {\"BillingPeriodEndDate\", type date}, {\"BillingPeriodStartDate\", type date}, {\"BillingProfileId\", Int64.Type}, {\"BillingProfileName\", type text}, {\"ChargeType\", type text}, {\"ConsumedService\", type text}, {\"CostAllocationRuleName\", type text}, {\"CostCenter\", type text}, {\"CostInBillingCurrency\", type number}, {\"CostInPricingCurrency\", type number}, {\"CostInUsd\", type any}, {\"Date\", type date}, {\"EffectivePrice\", type number}, {\"ExchangeRateDate\", type date}, {\"ExchangeRatePricingToBilling\", Int64.Type}, {\"Frequency\", type text}, {\"InvoiceId\", type any}, {\"InvoiceSectionId\", type any}, {\"InvoiceSectionName\", type text}, {\"IsAzureCreditEligible\", type logical}, {\"ResourceLocationNormalized\", type text}, {\"MeterCategory\", type text}, {\"MeterId\", type text}, {\"MeterName\", type text}, {\"MeterRegion\", type text}, {\"MeterSubCategory\", type text}, {\"OfferId\", type text}, {\"PaygCostInBillingCurrency\", type text}, {\"PaygCostInUsd\", type any}, {\"PaygPrice\", type number}, {\"PreviousInvoiceId\", type any}, {\"PricingCurrency\", type text}, {\"PricingModel\", type text}, {\"PartNumber\", type text}, {\"ProductId\", type any}, {\"ProductName\", type text}, {\"ProductOrderId\", type any}, {\"ProductOrderName\", type any}, {\"Provider\", type text}, {\"PublisherId\", type any}, {\"PublisherName\", type text}, {\"PublisherType\", type text}, {\"Quantity\", type number}, {\"ResellerMpnId\", type any}, {\"ResellerName\", type any}, {\"ResourceGroupName\", type text}, {\"ResourceId\", type text}, {\"ResourceLocation\", type text}, {\"ServiceFamily\", type text}, {\"ServiceInfo1\", type any}, {\"ServiceInfo2\", type text}, {\"ServicePeriodEndDate\", type any}, {\"ServicePeriodStartDate\", type date}, {\"SubscriptionId\", type text}, {\"SubscriptionName\", type text}, {\"Tags\", type text}, {\"Term\", type any}, {\"UnitOfMeasure\", type text}, {\"UnitPrice\", type number}}),",
        "    #\"Filter Rows by Date\" = Table.SelectRows(#\"Detect Column Types\", each [Date] >= Date.From(RangeStart) and [Date] < Date.From(RangeEnd)),",
        "    ",
        "    // Tags + TagsString (from CMConnector)",
        "    #\"Add TagsString\" = Table.AddColumn(#\"Filter Rows by Date\", \"TagsString\", each if [Tags] = null then \"{}\" else \"{\" & [Tags] & \"}\"),",
        "    #\"Remove Tags\" = Table.RemoveColumns(#\"Add TagsString\",{\"Tags\"}),",
        "    #\"Add Tags\" = Table.AddColumn(#\"Remove Tags\", \"Tags\", each [TagsString]),",
        "    #\"Parse Tags\" = Table.TransformColumns(#\"Add Tags\",{{\"Tags\", Json.Document}}),",
        "",
        "    // Extract AddlInfo for AHB (from CMConnector)",
        "    #\"Add AdditionalInfoDictionary\" = Table.AddColumn(#\"Parse Tags\", \"AdditionalInfoDictionary\", each if [AdditionalInfo] <> null and [AdditionalInfo] <> \"\" then [AdditionalInfo] else \"{}\"),",
        "    #\"Parse AdditionalInfoDictionary\" = Table.TransformColumns(#\"Add AdditionalInfoDictionary\",{{\"AdditionalInfoDictionary\", Json.Document}}),",
        "    #\"Replace AdditionalInfoDictionary Errors\" = Table.ReplaceErrorValues(#\"Parse AdditionalInfoDictionary\", {{\"AdditionalInfoDictionary\", null}}),",
        "    #\"Expand AdditionalInfoDictionary\" = Table.ExpandRecordColumn(#\"Replace AdditionalInfoDictionary Errors\", \"AdditionalInfoDictionary\", {\"UsageType\", \"ImageType\", \"ServiceType\", \"VMName\", \"VMProperties\", \"VCPUs\", \"CPUs\"}, {\"UsageType\", \"ImageType\", \"ServiceType\", \"VMName\", \"VMProperties\", \"VCPUs\", \"CPUs\"}),",
        "    #\"Change VCPUs Type\" = Table.TransformColumnTypes(#\"Expand AdditionalInfoDictionary\",{{\"VCPUs\", Int64.Type}}),",
        "    #\"Add CPUHours\" = Table.AddColumn(#\"Change VCPUs Type\", \"CPUHours\", each [VCPUs] * [Quantity], type number),",
        "    #\"Add AHB Status\" = Table.AddColumn(#\"Add CPUHours\", \"AHB Status\", each if [MeterSubCategory] = null then null else if Text.Contains([MeterSubCategory], \"Windows\") then \"Not enabled\" else if [ServiceInfo2] = null then null else if Text.Contains([ServiceInfo2], \"Windows Server BYOL\") then \"Enabled\" else \"Not supported\"),",
        "    #\"Add AHB vCPUs\" = Table.AddColumn(#\"Add AHB Status\", \"AHB vCPUs\", each if [VCPUs] = null then 0 else if [VCPUs] <= 8 then 8 else if [VCPUs] <= 16 then 16 else if [VCPUs] = 20 then 24 else if [VCPUs] > 20 then [VCPUs] else 0, Int64.Type),",
        "    #\"Added ResourceName\" = Table.AddColumn(#\"Add AHB vCPUs\", \"ResourceName\", each List.Last(Text.Split([ResourceId], \"/\"))),",
        "    #\"Add InstanceName\" = Table.AddColumn(#\"Added ResourceName\", \"InstanceName\", each if [VMName] = null then [ResourceName] else if [VMName] <> null then [VMName] else null),",
        "    #\"Rename ServiceType\" = Table.RenameColumns(#\"Add InstanceName\",{{\"ServiceType\", \"SKU\"}}),",
        "    #\"Add CompositeKey\" = Table.AddColumn(#\"Rename ServiceType\", \"CompositeKey\", each [SKU] & [MeterId]),",
        "    ",
        "    // Month column",
        "    #\"Add Month\" = Table.AddColumn(#\"Add CompositeKey\", \"Month\", each Date.StartOfMonth([Date])),",
        "",
        "    // Unique names",
        "    #\"Add CommitmentNameUnique\" = Table.AddColumn(#\"Add Month\", \"CommitmentNameUnique\", each if Text.Length([BenefitName]) = 0 then null else [BenefitName] & \" (\" & [BenefitId] & \")\"),",
        "    #\"Add ResourceNameUnique\" = Table.AddColumn(#\"Add CommitmentNameUnique\", \"ResourceNameUnique\", each if Text.Length([ResourceName]) = 0 then null else [ResourceName] & \" (\" & [ResourceId] & \")\"),",
        "    #\"Add ResourceGroupNameUnique\" = Table.AddColumn(#\"Add ResourceNameUnique\", \"ResourceGroupNameUnique\", each if Text.Length([ResourceGroupName]) = 0 then null else [ResourceGroupName] & \" (\" & [SubscriptionName] & \")\"),",
        "    #\"Add SubscriptionNameUnique\" = Table.AddColumn(#\"Add ResourceGroupNameUnique\", \"SubscriptionNameUnique\", each if Text.Length([SubscriptionName]) = 0 then null else [SubscriptionName] & \" (\" & [SubscriptionId] & \")\"),",
        "    ",
        "    // Commitment columns",
        "    #\"Add CommitmentType\" = Table.AddColumn(#\"Add SubscriptionNameUnique\", \"CommitmentType\", each if [PricingModel] = \"Reservation\" or [PricingModel] = \"SavingsPlan\" then [PricingModel] else null),",
        "    #\"Add CommitmentUtilizationAmount\" = Table.AddColumn(#\"Add CommitmentType\", \"CommitmentUtilizationAmount\", each if [ChargeType] = \"Usage\" and [PricingModel] = \"Reservation\" then [Quantity] else if [ChargeType] = \"Usage\" and [PricingModel] = \"SavingsPlan\" then [CostInBillingCurrency] else 0, type number),",
        "    #\"Add CommitmentUtilizationPotential\" = Table.AddColumn(#\"Add CommitmentUtilizationAmount\", \"CommitmentUtilizationPotential\", each if [PricingModel] = \"SavingsPlan\" then [CostInBillingCurrency] else if [PricingModel] = \"Reservation\" then [Quantity] else 0, type number),",
        "    // Savings columns",
        "    #\"Add RetailPrice\" = Table.AddColumn(#\"Add CommitmentUtilizationPotential\", \"RetailPrice\", each if [PaygPrice] > 0 then [PaygPrice] else [UnitPrice], type number),",
        "    #\"Add RetailCost\" = Table.AddColumn(#\"Add RetailPrice\", \"RetailCost\", each Number.Round([Quantity] * [RetailPrice], 8, RoundingMode.Down), type number),",
        "    #\"Add OnDemandCost\" = Table.AddColumn(#\"Add RetailCost\", \"OnDemandCost\", each Number.Round([Quantity] * [UnitPrice], 8, RoundingMode.Down), type number),",
        "    #\"Add CommitmentSavings\" = Table.AddColumn(#\"Add OnDemandCost\", \"CommitmentSavings\", each if [PricingModel] = \"OnDemand\" then 0 else if [ChargeType] = \"UnusedReservation\" or [ChargeType] = \"UnusedSavingsPlan\" then -[CostInBillingCurrency] else ([UnitPrice]-[EffectivePrice])*[Quantity], type number),",
        "    #\"Add DiscountSavings\" = Table.AddColumn(#\"Add CommitmentSavings\", \"DiscountSavings\", each if [ChargeType] = \"UnusedReservation\" or [ChargeType] = \"UnusedSavingsPlan\" then -[CostInBillingCurrency] else ([RetailPrice]-[EffectivePrice])*[Quantity], type number),",
        "    #\"Add NegotiatedSavings\" = Table.AddColumn(#\"Add DiscountSavings\", \"NegotiatedSavings\", each [DiscountSavings] - [CommitmentSavings], type number),",
        "    // Order columns",
        "    #\"Reorder Columns\" = Table.ReorderColumns(#\"Add NegotiatedSavings\", {\"Month\", \"Date\", \"PricingModel\", \"ChargeType\", \"CostInBillingCurrency\", \"OnDemandCost\", \"RetailCost\", \"DiscountSavings\", \"NegotiatedSavings\", \"CommitmentSavings\", \"UnitPrice\", \"EffectivePrice\", \"RetailPrice\", \"Quantity\", \"CommitmentUtilizationAmount\", \"CommitmentUtilizationPotential\", \"BillingAccountId\", \"BillingAccountName\", \"BillingProfileId\", \"BillingProfileName\", \"InvoiceSectionId\", \"InvoiceSectionName\", \"AccountOwnerId\", \"AccountName\", \"SubscriptionId\", \"SubscriptionName\", \"SubscriptionNameUnique\", \"ResourceGroupName\", \"ResourceGroupNameUnique\", \"ConsumedService\", \"ResourceId\", \"InstanceName\", \"ResourceNameUnique\", \"ResourceLocation\", \"Tags\", \"TagsString\", \"AdditionalInfo\", \"ServiceInfo1\", \"ServiceInfo2\", \"UsageType\", \"PublisherType\", \"PublisherName\", \"ProductName\", \"MeterCategory\", \"MeterSubCategory\", \"MeterId\", \"MeterName\", \"MeterRegion\", \"CostCenter\", \"OfferId\", \"ProductOrderId\", \"ProductOrderName\", \"UnitOfMeasure\", \"CommitmentNameUnique\", \"CommitmentType\", \"BenefitId\", \"BenefitName\", \"Term\", \"Frequency\", \"BillingPeriodStartDate\", \"BillingPeriodEndDate\"})",
        "in",
        "    #\"Reorder Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    // Ingest data from ADLS -- Copy \\\"storageUrlForPowerBI\\\" from hub deployment outputs\\n    Source = AzureStorage.DataLake(StorageUrl),\\n    #\\\"Filter Hidden Files1\\\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\\n    #\\\"Add Metric\\\" = Table.AddColumn(#\\\"Filter Hidden Files1\\\", \\\"Metric\\\", each List.Last(List.RemoveLastN(Text.Split([Folder Path],\\\"/\\\"), 1))),\\n    #\\\"Add Date Range\\\" = Table.AddColumn(#\\\"Add Metric\\\", \\\"Range\\\", each List.Last(List.RemoveLastN(List.RemoveLastN(Text.Split([Folder Path],\\\"/\\\"), 1), 1) )),\\n    #\\\"Split Dates\\\" = Table.SplitColumn(#\\\"Add Date Range\\\", \\\"Range\\\", Splitter.SplitTextByDelimiter(\\\"-\\\", QuoteStyle.Csv), {\\\"StartDate\\\", \\\"EndDate\\\"}),\\n    #\\\"Changed Date Type\\\" = Table.TransformColumnTypes(#\\\"Split Dates\\\",{{\\\"StartDate\\\", type date}, {\\\"EndDate\\\", type date}}),\\n    #\\\"Filter Files by Metric and FileType\\\" = Table.SelectRows(#\\\"Changed Date Type\\\", each [Metric] = \\\"amortizedcost\\\" and [Extension] = FileType),\\n    #\\\"Filtered Files by Date\\\" = Table.SelectRows(#\\\"Filter Files by Metric and FileType\\\", each [StartDate] >= Date.StartOfMonth(Date.From(RangeStart)) and [EndDate] <= Date.EndOfMonth(Date.From(RangeEnd))),\\n    #\\\"Select Content\\\" = Table.SelectColumns(#\\\"Filtered Files by Date\\\",{\\\"Content\\\"}),\\n    #\\\"Unpack Content\\\" = Table.AddColumn(#\\\"Select Content\\\", \\\"Custom\\\", each if FileType = \\\".gz\\\" then fnUnpackData([Content]) else Parquet.Document([Content])),\\n    #\\\"Expanded Columns\\\" = Table.ExpandTableColumn(#\\\"Unpack Content\\\", \\\"Custom\\\", {\\\"AccountName\\\", \\\"AccountOwnerId\\\", \\\"AdditionalInfo\\\", \\\"BenefitId\\\", \\\"BenefitName\\\", \\\"BillingAccountId\\\", \\\"BillingAccountName\\\", \\\"BillingCurrency\\\", \\\"BillingPeriodEndDate\\\", \\\"BillingPeriodStartDate\\\", \\\"BillingProfileId\\\", \\\"BillingProfileName\\\", \\\"ChargeType\\\", \\\"ConsumedService\\\", \\\"CostAllocationRuleName\\\", \\\"CostCenter\\\", \\\"CostInBillingCurrency\\\", \\\"CostInPricingCurrency\\\", \\\"CostInUsd\\\", \\\"Date\\\", \\\"EffectivePrice\\\", \\\"ExchangeRateDate\\\", \\\"ExchangeRatePricingToBilling\\\", \\\"Frequency\\\", \\\"InvoiceId\\\", \\\"InvoiceSectionId\\\", \\\"InvoiceSectionName\\\", \\\"IsAzureCreditEligible\\\", \\\"ResourceLocationNormalized\\\", \\\"MeterCategory\\\", \\\"MeterId\\\", \\\"MeterName\\\", \\\"MeterRegion\\\", \\\"MeterSubCategory\\\", \\\"OfferId\\\", \\\"PaygCostInBillingCurrency\\\", \\\"PaygCostInUsd\\\", \\\"PaygPrice\\\", \\\"PreviousInvoiceId\\\", \\\"PricingCurrency\\\", \\\"PricingModel\\\", \\\"PartNumber\\\", \\\"ProductId\\\", \\\"ProductName\\\", \\\"ProductOrderId\\\", \\\"ProductOrderName\\\", \\\"Provider\\\", \\\"PublisherId\\\", \\\"PublisherName\\\", \\\"PublisherType\\\", \\\"Quantity\\\", \\\"ResellerMpnId\\\", \\\"ResellerName\\\", \\\"ResourceGroupName\\\", \\\"ResourceId\\\", \\\"ResourceLocation\\\", \\\"ServiceFamily\\\", \\\"ServiceInfo1\\\", \\\"ServiceInfo2\\\", \\\"ServicePeriodEndDate\\\", \\\"ServicePeriodStartDate\\\", \\\"SubscriptionId\\\", \\\"SubscriptionName\\\", \\\"Tags\\\", \\\"Term\\\", \\\"UnitOfMeasure\\\", \\\"UnitPrice\\\"}, {\\\"AccountName\\\", \\\"AccountOwnerId\\\", \\\"AdditionalInfo\\\", \\\"BenefitId\\\", \\\"BenefitName\\\", \\\"BillingAccountId\\\", \\\"BillingAccountName\\\", \\\"BillingCurrency\\\", \\\"BillingPeriodEndDate\\\", \\\"BillingPeriodStartDate\\\", \\\"BillingProfileId\\\", \\\"BillingProfileName\\\", \\\"ChargeType\\\", \\\"ConsumedService\\\", \\\"CostAllocationRuleName\\\", \\\"CostCenter\\\", \\\"CostInBillingCurrency\\\", \\\"CostInPricingCurrency\\\", \\\"CostInUsd\\\", \\\"Date\\\", \\\"EffectivePrice\\\", \\\"ExchangeRateDate\\\", \\\"ExchangeRatePricingToBilling\\\", \\\"Frequency\\\", \\\"InvoiceId\\\", \\\"InvoiceSectionId\\\", \\\"InvoiceSectionName\\\", \\\"IsAzureCreditEligible\\\", \\\"ResourceLocationNormalized\\\", \\\"MeterCategory\\\", \\\"MeterId\\\", \\\"MeterName\\\", \\\"MeterRegion\\\", \\\"MeterSubCategory\\\", \\\"OfferId\\\", \\\"PaygCostInBillingCurrency\\\", \\\"PaygCostInUsd\\\", \\\"PaygPrice\\\", \\\"PreviousInvoiceId\\\", \\\"PricingCurrency\\\", \\\"PricingModel\\\", \\\"PartNumber\\\", \\\"ProductId\\\", \\\"ProductName\\\", \\\"ProductOrderId\\\", \\\"ProductOrderName\\\", \\\"Provider\\\", \\\"PublisherId\\\", \\\"PublisherName\\\", \\\"PublisherType\\\", \\\"Quantity\\\", \\\"ResellerMpnId\\\", \\\"ResellerName\\\", \\\"ResourceGroupName\\\", \\\"ResourceId\\\", \\\"ResourceLocation\\\", \\\"ServiceFamily\\\", \\\"ServiceInfo1\\\", \\\"ServiceInfo2\\\", \\\"ServicePeriodEndDate\\\", \\\"ServicePeriodStartDate\\\", \\\"SubscriptionId\\\", \\\"SubscriptionName\\\", \\\"Tags\\\", \\\"Term\\\", \\\"UnitOfMeasure\\\", \\\"UnitPrice\\\"}),\\n    #\\\"Removed Content\\\" = Table.RemoveColumns(#\\\"Expanded Columns\\\",{\\\"Content\\\"}),\\n    #\\\"Detect Column Types\\\" = Table.TransformColumnTypes(#\\\"Removed Content\\\",{{\\\"AccountName\\\", type text}, {\\\"AccountOwnerId\\\", type text}, {\\\"AdditionalInfo\\\", type text}, {\\\"BenefitId\\\", type any}, {\\\"BenefitName\\\", type any}, {\\\"BillingAccountId\\\", Int64.Type}, {\\\"BillingAccountName\\\", type text}, {\\\"BillingCurrency\\\", type text}, {\\\"BillingPeriodEndDate\\\", type date}, {\\\"BillingPeriodStartDate\\\", type date}, {\\\"BillingProfileId\\\", Int64.Type}, {\\\"BillingProfileName\\\", type text}, {\\\"ChargeType\\\", type text}, {\\\"ConsumedService\\\", type text}, {\\\"CostAllocationRuleName\\\", type text}, {\\\"CostCenter\\\", type text}, {\\\"CostInBillingCurrency\\\", type number}, {\\\"CostInPricingCurrency\\\", type number}, {\\\"CostInUsd\\\", type any}, {\\\"Date\\\", type date}, {\\\"EffectivePrice\\\", type number}, {\\\"ExchangeRateDate\\\", type date}, {\\\"ExchangeRatePricingToBilling\\\", Int64.Type}, {\\\"Frequency\\\", type text}, {\\\"InvoiceId\\\", type any}, {\\\"InvoiceSectionId\\\", type any}, {\\\"InvoiceSectionName\\\", type text}, {\\\"IsAzureCreditEligible\\\", type logical}, {\\\"ResourceLocationNormalized\\\", type text}, {\\\"MeterCategory\\\", type text}, {\\\"MeterId\\\", type text}, {\\\"MeterName\\\", type text}, {\\\"MeterRegion\\\", type text}, {\\\"MeterSubCategory\\\", type text}, {\\\"OfferId\\\", type text}, {\\\"PaygCostInBillingCurrency\\\", type text}, {\\\"PaygCostInUsd\\\", type any}, {\\\"PaygPrice\\\", type number}, {\\\"PreviousInvoiceId\\\", type any}, {\\\"PricingCurrency\\\", type text}, {\\\"PricingModel\\\", type text}, {\\\"PartNumber\\\", type text}, {\\\"ProductId\\\", type any}, {\\\"ProductName\\\", type text}, {\\\"ProductOrderId\\\", type any}, {\\\"ProductOrderName\\\", type any}, {\\\"Provider\\\", type text}, {\\\"PublisherId\\\", type any}, {\\\"PublisherName\\\", type text}, {\\\"PublisherType\\\", type text}, {\\\"Quantity\\\", type number}, {\\\"ResellerMpnId\\\", type any}, {\\\"ResellerName\\\", type any}, {\\\"ResourceGroupName\\\", type text}, {\\\"ResourceId\\\", type text}, {\\\"ResourceLocation\\\", type text}, {\\\"ServiceFamily\\\", type text}, {\\\"ServiceInfo1\\\", type any}, {\\\"ServiceInfo2\\\", type text}, {\\\"ServicePeriodEndDate\\\", type any}, {\\\"ServicePeriodStartDate\\\", type date}, {\\\"SubscriptionId\\\", type text}, {\\\"SubscriptionName\\\", type text}, {\\\"Tags\\\", type text}, {\\\"Term\\\", type any}, {\\\"UnitOfMeasure\\\", type text}, {\\\"UnitPrice\\\", type number}}),\\n    #\\\"Filter Rows by Date\\\" = Table.SelectRows(#\\\"Detect Column Types\\\", each [Date] >= Date.From(RangeStart) and [Date] < Date.From(RangeEnd)),\\n    \\n    // Tags + TagsString (from CMConnector)\\n    #\\\"Add TagsString\\\" = Table.AddColumn(#\\\"Filter Rows by Date\\\", \\\"TagsString\\\", each if [Tags] = null then \\\"{}\\\" else \\\"{\\\" & [Tags] & \\\"}\\\"),\\n    #\\\"Remove Tags\\\" = Table.RemoveColumns(#\\\"Add TagsString\\\",{\\\"Tags\\\"}),\\n    #\\\"Add Tags\\\" = Table.AddColumn(#\\\"Remove Tags\\\", \\\"Tags\\\", each [TagsString]),\\n    #\\\"Parse Tags\\\" = Table.TransformColumns(#\\\"Add Tags\\\",{{\\\"Tags\\\", Json.Document}}),\\n\\n    // Extract AddlInfo for AHB (from CMConnector)\\n    #\\\"Add AdditionalInfoDictionary\\\" = Table.AddColumn(#\\\"Parse Tags\\\", \\\"AdditionalInfoDictionary\\\", each if [AdditionalInfo] <> null and [AdditionalInfo] <> \\\"\\\" then [AdditionalInfo] else \\\"{}\\\"),\\n    #\\\"Parse AdditionalInfoDictionary\\\" = Table.TransformColumns(#\\\"Add AdditionalInfoDictionary\\\",{{\\\"AdditionalInfoDictionary\\\", Json.Document}}),\\n    #\\\"Replace AdditionalInfoDictionary Errors\\\" = Table.ReplaceErrorValues(#\\\"Parse AdditionalInfoDictionary\\\", {{\\\"AdditionalInfoDictionary\\\", null}}),\\n    #\\\"Expand AdditionalInfoDictionary\\\" = Table.ExpandRecordColumn(#\\\"Replace AdditionalInfoDictionary Errors\\\", \\\"AdditionalInfoDictionary\\\", {\\\"UsageType\\\", \\\"ImageType\\\", \\\"ServiceType\\\", \\\"VMName\\\", \\\"VMProperties\\\", \\\"VCPUs\\\", \\\"CPUs\\\"}, {\\\"UsageType\\\", \\\"ImageType\\\", \\\"ServiceType\\\", \\\"VMName\\\", \\\"VMProperties\\\", \\\"VCPUs\\\", \\\"CPUs\\\"}),\\n    #\\\"Change VCPUs Type\\\" = Table.TransformColumnTypes(#\\\"Expand AdditionalInfoDictionary\\\",{{\\\"VCPUs\\\", Int64.Type}}),\\n    #\\\"Add CPUHours\\\" = Table.AddColumn(#\\\"Change VCPUs Type\\\", \\\"CPUHours\\\", each [VCPUs] * [Quantity], type number),\\n    #\\\"Add AHB Status\\\" = Table.AddColumn(#\\\"Add CPUHours\\\", \\\"AHB Status\\\", each if [MeterSubCategory] = null then null else if Text.Contains([MeterSubCategory], \\\"Windows\\\") then \\\"Not enabled\\\" else if [ServiceInfo2] = null then null else if Text.Contains([ServiceInfo2], \\\"Windows Server BYOL\\\") then \\\"Enabled\\\" else \\\"Not supported\\\"),\\n    #\\\"Add AHB vCPUs\\\" = Table.AddColumn(#\\\"Add AHB Status\\\", \\\"AHB vCPUs\\\", each if [VCPUs] = null then 0 else if [VCPUs] <= 8 then 8 else if [VCPUs] <= 16 then 16 else if [VCPUs] = 20 then 24 else if [VCPUs] > 20 then [VCPUs] else 0, Int64.Type),\\n    #\\\"Added ResourceName\\\" = Table.AddColumn(#\\\"Add AHB vCPUs\\\", \\\"ResourceName\\\", each List.Last(Text.Split([ResourceId], \\\"/\\\"))),\\n    #\\\"Add InstanceName\\\" = Table.AddColumn(#\\\"Added ResourceName\\\", \\\"InstanceName\\\", each if [VMName] = null then [ResourceName] else if [VMName] <> null then [VMName] else null),\\n    #\\\"Rename ServiceType\\\" = Table.RenameColumns(#\\\"Add InstanceName\\\",{{\\\"ServiceType\\\", \\\"SKU\\\"}}),\\n    #\\\"Add CompositeKey\\\" = Table.AddColumn(#\\\"Rename ServiceType\\\", \\\"CompositeKey\\\", each [SKU] & [MeterId]),\\n    \\n    // Month column\\n    #\\\"Add Month\\\" = Table.AddColumn(#\\\"Add CompositeKey\\\", \\\"Month\\\", each Date.StartOfMonth([Date])),\\n\\n    // Unique names\\n    #\\\"Add CommitmentNameUnique\\\" = Table.AddColumn(#\\\"Add Month\\\", \\\"CommitmentNameUnique\\\", each if Text.Length([BenefitName]) = 0 then null else [BenefitName] & \\\" (\\\" & [BenefitId] & \\\")\\\"),\\n    #\\\"Add ResourceNameUnique\\\" = Table.AddColumn(#\\\"Add CommitmentNameUnique\\\", \\\"ResourceNameUnique\\\", each if Text.Length([ResourceName]) = 0 then null else [ResourceName] & \\\" (\\\" & [ResourceId] & \\\")\\\"),\\n    #\\\"Add ResourceGroupNameUnique\\\" = Table.AddColumn(#\\\"Add ResourceNameUnique\\\", \\\"ResourceGroupNameUnique\\\", each if Text.Length([ResourceGroupName]) = 0 then null else [ResourceGroupName] & \\\" (\\\" & [SubscriptionName] & \\\")\\\"),\\n    #\\\"Add SubscriptionNameUnique\\\" = Table.AddColumn(#\\\"Add ResourceGroupNameUnique\\\", \\\"SubscriptionNameUnique\\\", each if Text.Length([SubscriptionName]) = 0 then null else [SubscriptionName] & \\\" (\\\" & [SubscriptionId] & \\\")\\\"),\\n    \\n    // Commitment columns\\n    #\\\"Add CommitmentType\\\" = Table.AddColumn(#\\\"Add SubscriptionNameUnique\\\", \\\"CommitmentType\\\", each if [PricingModel] = \\\"Reservation\\\" or [PricingModel] = \\\"SavingsPlan\\\" then [PricingModel] else null),\\n    #\\\"Add CommitmentUtilizationAmount\\\" = Table.AddColumn(#\\\"Add CommitmentType\\\", \\\"CommitmentUtilizationAmount\\\", each if [ChargeType] = \\\"Usage\\\" and [PricingModel] = \\\"Reservation\\\" then [Quantity] else if [ChargeType] = \\\"Usage\\\" and [PricingModel] = \\\"SavingsPlan\\\" then [CostInBillingCurrency] else 0, type number),\\n    #\\\"Add CommitmentUtilizationPotential\\\" = Table.AddColumn(#\\\"Add CommitmentUtilizationAmount\\\", \\\"CommitmentUtilizationPotential\\\", each if [PricingModel] = \\\"SavingsPlan\\\" then [CostInBillingCurrency] else if [PricingModel] = \\\"Reservation\\\" then [Quantity] else 0, type number),\\n    // Savings columns\\n    #\\\"Add RetailPrice\\\" = Table.AddColumn(#\\\"Add CommitmentUtilizationPotential\\\", \\\"RetailPrice\\\", each if [PaygPrice] > 0 then [PaygPrice] else [UnitPrice], type number),\\n    #\\\"Add RetailCost\\\" = Table.AddColumn(#\\\"Add RetailPrice\\\", \\\"RetailCost\\\", each Number.Round([Quantity] * [RetailPrice], 8, RoundingMode.Down), type number),\\n    #\\\"Add OnDemandCost\\\" = Table.AddColumn(#\\\"Add RetailCost\\\", \\\"OnDemandCost\\\", each Number.Round([Quantity] * [UnitPrice], 8, RoundingMode.Down), type number),\\n    #\\\"Add CommitmentSavings\\\" = Table.AddColumn(#\\\"Add OnDemandCost\\\", \\\"CommitmentSavings\\\", each if [PricingModel] = \\\"OnDemand\\\" then 0 else if [ChargeType] = \\\"UnusedReservation\\\" or [ChargeType] = \\\"UnusedSavingsPlan\\\" then -[CostInBillingCurrency] else ([UnitPrice]-[EffectivePrice])*[Quantity], type number),\\n    #\\\"Add DiscountSavings\\\" = Table.AddColumn(#\\\"Add CommitmentSavings\\\", \\\"DiscountSavings\\\", each if [ChargeType] = \\\"UnusedReservation\\\" or [ChargeType] = \\\"UnusedSavingsPlan\\\" then -[CostInBillingCurrency] else ([RetailPrice]-[EffectivePrice])*[Quantity], type number),\\n    #\\\"Add NegotiatedSavings\\\" = Table.AddColumn(#\\\"Add DiscountSavings\\\", \\\"NegotiatedSavings\\\", each [DiscountSavings] - [CommitmentSavings], type number),\\n    // Order columns\\n    #\\\"Reorder Columns\\\" = Table.ReorderColumns(#\\\"Add NegotiatedSavings\\\", {\\\"Month\\\", \\\"Date\\\", \\\"PricingModel\\\", \\\"ChargeType\\\", \\\"CostInBillingCurrency\\\", \\\"OnDemandCost\\\", \\\"RetailCost\\\", \\\"DiscountSavings\\\", \\\"NegotiatedSavings\\\", \\\"CommitmentSavings\\\", \\\"UnitPrice\\\", \\\"EffectivePrice\\\", \\\"RetailPrice\\\", \\\"Quantity\\\", \\\"CommitmentUtilizationAmount\\\", \\\"CommitmentUtilizationPotential\\\", \\\"BillingAccountId\\\", \\\"BillingAccountName\\\", \\\"BillingProfileId\\\", \\\"BillingProfileName\\\", \\\"InvoiceSectionId\\\", \\\"InvoiceSectionName\\\", \\\"AccountOwnerId\\\", \\\"AccountName\\\", \\\"SubscriptionId\\\", \\\"SubscriptionName\\\", \\\"SubscriptionNameUnique\\\", \\\"ResourceGroupName\\\", \\\"ResourceGroupNameUnique\\\", \\\"ConsumedService\\\", \\\"ResourceId\\\", \\\"InstanceName\\\", \\\"ResourceNameUnique\\\", \\\"ResourceLocation\\\", \\\"Tags\\\", \\\"TagsString\\\", \\\"AdditionalInfo\\\", \\\"ServiceInfo1\\\", \\\"ServiceInfo2\\\", \\\"UsageType\\\", \\\"PublisherType\\\", \\\"PublisherName\\\", \\\"ProductName\\\", \\\"MeterCategory\\\", \\\"MeterSubCategory\\\", \\\"MeterId\\\", \\\"MeterName\\\", \\\"MeterRegion\\\", \\\"CostCenter\\\", \\\"OfferId\\\", \\\"ProductOrderId\\\", \\\"ProductOrderName\\\", \\\"UnitOfMeasure\\\", \\\"CommitmentNameUnique\\\", \\\"CommitmentType\\\", \\\"BenefitId\\\", \\\"BenefitName\\\", \\\"Term\\\", \\\"Frequency\\\", \\\"BillingPeriodStartDate\\\", \\\"BillingPeriodEndDate\\\"})\\nin\\n    #\\\"Reorder Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "FinOps toolkit",
      "id": "1fb330b2-9f59-44be-b498-c7be0eb0cc79",
      "description": ""
    }
  ],
  "culture": "en-US",
  "firewallEnabled": true
}