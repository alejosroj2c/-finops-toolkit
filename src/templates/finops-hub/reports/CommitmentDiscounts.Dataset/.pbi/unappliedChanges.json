{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "BillingProfileIdOrEnrollmentNumber",
      "lineageTag": "c5dcc2d2-20b2-41f1-b21b-8f70411cf9d6",
      "description": "Enter your EA account enrollment number",
      "queryGroupId": "52f75cc9-a166-4263-8708-e2fe5b53515d",
      "navigationStepName": "Navigation",
      "text": [
        "\"8611537\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "Scope",
      "lineageTag": "5ba7734c-1aa9-4a3f-b3c7-4c4337a9b8f4",
      "description": "Enter the scope as 'Enrollment Number'",
      "queryGroupId": "52f75cc9-a166-4263-8708-e2fe5b53515d",
      "text": [
        "\"Enrollment Number\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "RI recommendations (shared)",
      "lineageTag": "12af8e08-fab4-4534-aa86-4ed70450fa38",
      "queryGroupId": "52f75cc9-a166-4263-8708-e2fe5b53515d",
      "text": [
        "let",
        "    Source =AzureCostManagement.Tables(Scope, BillingProfileIdOrEnrollmentNumber, 1, []),",
        "    rirecommendationsshared = Source{[Key=\"rirecommendationsshared\"]}[Data],",
        "    #\"Removed Other Columns\" = Table.SelectColumns(rirecommendationsshared,{\"meterId\", \"term\", \"costWithNoReservedInstances\", \"recommendedQuantity\", \"totalCostWithReservedInstances\", \"netSavings\", \"firstUsageDate\", \"scope\", \"lookBackPeriod\", \"instanceFlexibilityRatio\", \"instanceFlexibilityGroup\", \"normalizedSize\", \"recommendedQuantityNormalized\", \"skuProperties\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"instanceFlexibilityRatio\", Int64.Type}, {\"recommendedQuantityNormalized\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source =AzureCostManagement.Tables(Scope, BillingProfileIdOrEnrollmentNumber, 1, []),\\r\\n    rirecommendationsshared = Source{[Key=\\\"rirecommendationsshared\\\"]}[Data],\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(rirecommendationsshared,{\\\"meterId\\\", \\\"term\\\", \\\"costWithNoReservedInstances\\\", \\\"recommendedQuantity\\\", \\\"totalCostWithReservedInstances\\\", \\\"netSavings\\\", \\\"firstUsageDate\\\", \\\"scope\\\", \\\"lookBackPeriod\\\", \\\"instanceFlexibilityRatio\\\", \\\"instanceFlexibilityGroup\\\", \\\"normalizedSize\\\", \\\"recommendedQuantityNormalized\\\", \\\"skuProperties\\\"}),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Removed Other Columns\\\",{{\\\"instanceFlexibilityRatio\\\", Int64.Type}, {\\\"recommendedQuantityNormalized\\\", Int64.Type}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "RI recommendations (single)",
      "lineageTag": "ff05b167-d275-4b4f-95a1-c0888419e5fa",
      "queryGroupId": "52f75cc9-a166-4263-8708-e2fe5b53515d",
      "text": [
        "let",
        "    Source = AzureCostManagement.Tables(Scope, BillingProfileIdOrEnrollmentNumber, 1, []),",
        "    rirecommendationssingle = Source{[Key=\"rirecommendationssingle\"]}[Data],",
        "    #\"Removed Other Columns\" = Table.SelectColumns(rirecommendationssingle,{\"meterId\", \"term\", \"costWithNoReservedInstances\", \"recommendedQuantity\", \"totalCostWithReservedInstances\", \"netSavings\", \"firstUsageDate\", \"scope\", \"lookBackPeriod\", \"instanceFlexibilityRatio\", \"instanceFlexibilityGroup\", \"normalizedSize\", \"recommendedQuantityNormalized\", \"skuProperties\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"instanceFlexibilityRatio\", Int64.Type}, {\"recommendedQuantityNormalized\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = AzureCostManagement.Tables(Scope, BillingProfileIdOrEnrollmentNumber, 1, []),\\r\\n    rirecommendationssingle = Source{[Key=\\\"rirecommendationssingle\\\"]}[Data],\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(rirecommendationssingle,{\\\"meterId\\\", \\\"term\\\", \\\"costWithNoReservedInstances\\\", \\\"recommendedQuantity\\\", \\\"totalCostWithReservedInstances\\\", \\\"netSavings\\\", \\\"firstUsageDate\\\", \\\"scope\\\", \\\"lookBackPeriod\\\", \\\"instanceFlexibilityRatio\\\", \\\"instanceFlexibilityGroup\\\", \\\"normalizedSize\\\", \\\"recommendedQuantityNormalized\\\", \\\"skuProperties\\\"}),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Removed Other Columns\\\",{{\\\"instanceFlexibilityRatio\\\", Int64.Type}, {\\\"recommendedQuantityNormalized\\\", Int64.Type}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "InstanceSizeFlexibility",
      "lineageTag": "c5e83760-b6a9-4822-8036-456eec5c16d6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Csv.Document(AzureStorage.BlobContents(\"https://ccmstorageprod.blob.core.windows.net/costmanagementconnector-data/AutofitComboMeterData.csv\"),[Delimiter=\",\", Columns=9, Encoding=65001, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"InstanceSizeFlexibilityGroup\", type text}, {\"ResourceLocation\", type text}, {\"ArmSkuName\", type text}, {\"Ratio\", Int64.Type}, {\"ComboMeter\", type text}, {\"HardwareMeter\", type text}, {\"SoftwareMeter\", type text}, {\"CompositeKey\", type text}, {\"NormalizedSKU\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Csv.Document(AzureStorage.BlobContents(\\\"https://ccmstorageprod.blob.core.windows.net/costmanagementconnector-data/AutofitComboMeterData.csv\\\"),[Delimiter=\\\",\\\", Columns=9, Encoding=65001, QuoteStyle=QuoteStyle.None]),\\r\\n    #\\\"Promoted Headers\\\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Promoted Headers\\\",{{\\\"InstanceSizeFlexibilityGroup\\\", type text}, {\\\"ResourceLocation\\\", type text}, {\\\"ArmSkuName\\\", type text}, {\\\"Ratio\\\", Int64.Type}, {\\\"ComboMeter\\\", type text}, {\\\"HardwareMeter\\\", type text}, {\\\"SoftwareMeter\\\", type text}, {\\\"CompositeKey\\\", type text}, {\\\"NormalizedSKU\\\", type text}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Recommendations",
      "lineageTag": "bdae834b-1924-4617-9c39-e623d960a03b",
      "queryGroupId": "52f75cc9-a166-4263-8708-e2fe5b53515d",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.Combine({#\"RI recommendations (shared)\", #\"RI recommendations (single)\"})",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Table.Combine({#\\\"RI recommendations (shared)\\\", #\\\"RI recommendations (single)\\\"})\\r\\nin\\r\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "StorageUrl",
      "lineageTag": "9822a938-a2c3-4661-8c41-aaa6bf664fd3",
      "description": "Name of the Azure DataLake Gen2 storage account to pull data from.",
      "queryGroupId": "03957bab-f654-4839-8b10-e8998be77d2a",
      "text": [
        "\"https://finopshubdej33rzckeakmum.dfs.core.windows.net/ingestion\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "FileType",
      "lineageTag": "586a3859-5bd2-42dd-97a8-996800c0e22d",
      "queryGroupId": "03957bab-f654-4839-8b10-e8998be77d2a",
      "text": [
        "\".parquet\" meta [IsParameterQuery=true, List={\".parquet\", \".gz\"}, DefaultValue=\".parquet\", Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "RangeStart",
      "lineageTag": "dc2c30b3-0cd4-4bbf-ac6e-5b8b0e5593fd",
      "queryGroupId": "03957bab-f654-4839-8b10-e8998be77d2a",
      "text": [
        "#datetime(2023, 1, 1, 0, 0, 0) meta [IsParameterQuery=true, Type=\"DateTime\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "DateTime",
      "isHidden": false
    },
    {
      "name": "RangeEnd",
      "lineageTag": "c01abdf6-6fab-4d59-aca5-49d5ea6b562d",
      "queryGroupId": "03957bab-f654-4839-8b10-e8998be77d2a",
      "text": [
        "#datetime(2024, 1, 1, 0, 0, 0) meta [IsParameterQuery=true, Type=\"DateTime\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "DateTime",
      "isHidden": false
    },
    {
      "name": "fnUnpackData",
      "lineageTag": "556db6f1-76fc-485e-862b-39649ffd9929",
      "queryGroupId": "03957bab-f654-4839-8b10-e8998be77d2a",
      "text": [
        "let",
        "    Source = (zipData) =>",
        "let",
        "Source =",
        "        Binary.Decompress(",
        "                zipData,",
        "                Compression.GZip",
        "        ),",
        "#\"Imported\" =",
        "        Csv.Document(Source,[Delimiter=\",\", Columns=60, Encoding=1252, QuoteStyle=QuoteStyle.Csv, CsvStyle=CsvStyle.QuoteAlways]),",
        "",
        "#\"Promoted Headers\" = Table.PromoteHeaders(#\"Imported\", [PromoteAllScalars=true])",
        "in",
        "#\"Promoted Headers\"",
        "in",
        "    Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "CostDetails",
      "lineageTag": "a55248c9-3ad8-41ad-92a9-8b49d304fcd4",
      "queryGroupId": "03957bab-f654-4839-8b10-e8998be77d2a",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    // Ingest data from ADLS -- Copy \"storageUrlForPowerBI\" from hub deployment outputs",
        "    Source = AzureStorage.DataLake(StorageUrl),",
        "    #\"Filter Hidden Files1\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),",
        "    #\"Add Metric\" = Table.AddColumn(#\"Filter Hidden Files1\", \"Metric\", each List.Last(List.RemoveLastN(Text.Split([Folder Path],\"/\"), 1))),",
        "    #\"Add Date Range\" = Table.AddColumn(#\"Add Metric\", \"Range\", each List.Last(List.RemoveLastN(List.RemoveLastN(Text.Split([Folder Path],\"/\"), 1), 1) )),",
        "    #\"Split Dates\" = Table.SplitColumn(#\"Add Date Range\", \"Range\", Splitter.SplitTextByDelimiter(\"-\", QuoteStyle.Csv), {\"StartDate\", \"EndDate\"}),",
        "    #\"Changed Date Type\" = Table.TransformColumnTypes(#\"Split Dates\",{{\"StartDate\", type date}, {\"EndDate\", type date}}),",
        "    #\"Filter Files by Metric and FileType\" = Table.SelectRows(#\"Changed Date Type\", each [Metric] = \"amortizedcost\" and [Extension] = FileType),",
        "    #\"Filtered Files by Date\" = Table.SelectRows(#\"Filter Files by Metric and FileType\", each [StartDate] >= Date.StartOfMonth(Date.From(RangeStart)) and [EndDate] <= Date.EndOfMonth(Date.From(RangeEnd))),",
        "    #\"Select Content\" = Table.SelectColumns(#\"Filtered Files by Date\",{\"Content\"}),",
        "    #\"Unpack Content\" = Table.AddColumn(#\"Select Content\", \"Custom\", each if FileType = \".gz\" then fnUnpackData([Content]) else Parquet.Document([Content])),",
        "    #\"Expanded Columns\" = Table.ExpandTableColumn(#\"Unpack Content\", \"Custom\", {\"AccountName\", \"AccountOwnerId\", \"AdditionalInfo\", \"BenefitId\", \"BenefitName\", \"BillingAccountId\", \"BillingAccountName\", \"BillingCurrency\", \"BillingPeriodEndDate\", \"BillingPeriodStartDate\", \"BillingProfileId\", \"BillingProfileName\", \"ChargeType\", \"ConsumedService\", \"CostAllocationRuleName\", \"CostCenter\", \"CostInBillingCurrency\", \"CostInPricingCurrency\", \"CostInUsd\", \"Date\", \"EffectivePrice\", \"ExchangeRateDate\", \"ExchangeRatePricingToBilling\", \"Frequency\", \"InvoiceId\", \"InvoiceSectionId\", \"InvoiceSectionName\", \"IsAzureCreditEligible\", \"ResourceLocationNormalized\", \"MeterCategory\", \"MeterId\", \"MeterName\", \"MeterRegion\", \"MeterSubCategory\", \"OfferId\", \"PaygCostInBillingCurrency\", \"PaygCostInUsd\", \"PaygPrice\", \"PreviousInvoiceId\", \"PricingCurrency\", \"PricingModel\", \"PartNumber\", \"ProductId\", \"ProductName\", \"ProductOrderId\", \"ProductOrderName\", \"Provider\", \"PublisherId\", \"PublisherName\", \"PublisherType\", \"Quantity\", \"ResellerMpnId\", \"ResellerName\", \"ResourceGroupName\", \"ResourceId\", \"ResourceLocation\", \"ServiceFamily\", \"ServiceInfo1\", \"ServiceInfo2\", \"ServicePeriodEndDate\", \"ServicePeriodStartDate\", \"SubscriptionId\", \"SubscriptionName\", \"Tags\", \"Term\", \"UnitOfMeasure\", \"UnitPrice\"}, {\"AccountName\", \"AccountOwnerId\", \"AdditionalInfo\", \"BenefitId\", \"BenefitName\", \"BillingAccountId\", \"BillingAccountName\", \"BillingCurrency\", \"BillingPeriodEndDate\", \"BillingPeriodStartDate\", \"BillingProfileId\", \"BillingProfileName\", \"ChargeType\", \"ConsumedService\", \"CostAllocationRuleName\", \"CostCenter\", \"CostInBillingCurrency\", \"CostInPricingCurrency\", \"CostInUsd\", \"Date\", \"EffectivePrice\", \"ExchangeRateDate\", \"ExchangeRatePricingToBilling\", \"Frequency\", \"InvoiceId\", \"InvoiceSectionId\", \"InvoiceSectionName\", \"IsAzureCreditEligible\", \"ResourceLocationNormalized\", \"MeterCategory\", \"MeterId\", \"MeterName\", \"MeterRegion\", \"MeterSubCategory\", \"OfferId\", \"PaygCostInBillingCurrency\", \"PaygCostInUsd\", \"PaygPrice\", \"PreviousInvoiceId\", \"PricingCurrency\", \"PricingModel\", \"PartNumber\", \"ProductId\", \"ProductName\", \"ProductOrderId\", \"ProductOrderName\", \"Provider\", \"PublisherId\", \"PublisherName\", \"PublisherType\", \"Quantity\", \"ResellerMpnId\", \"ResellerName\", \"ResourceGroupName\", \"ResourceId\", \"ResourceLocation\", \"ServiceFamily\", \"ServiceInfo1\", \"ServiceInfo2\", \"ServicePeriodEndDate\", \"ServicePeriodStartDate\", \"SubscriptionId\", \"SubscriptionName\", \"Tags\", \"Term\", \"UnitOfMeasure\", \"UnitPrice\"}),",
        "    #\"Removed Content\" = Table.RemoveColumns(#\"Expanded Columns\",{\"Content\"}),",
        "    #\"Detect Column Types\" = Table.TransformColumnTypes(#\"Removed Content\",{{\"AccountName\", type text}, {\"AccountOwnerId\", type text}, {\"AdditionalInfo\", type text}, {\"BenefitId\", type any}, {\"BenefitName\", type any}, {\"BillingAccountId\", Int64.Type}, {\"BillingAccountName\", type text}, {\"BillingCurrency\", type text}, {\"BillingPeriodEndDate\", type date}, {\"BillingPeriodStartDate\", type date}, {\"BillingProfileId\", Int64.Type}, {\"BillingProfileName\", type text}, {\"ChargeType\", type text}, {\"ConsumedService\", type text}, {\"CostAllocationRuleName\", type text}, {\"CostCenter\", type text}, {\"CostInBillingCurrency\", type number}, {\"CostInPricingCurrency\", type number}, {\"CostInUsd\", type any}, {\"Date\", type date}, {\"EffectivePrice\", type number}, {\"ExchangeRateDate\", type date}, {\"ExchangeRatePricingToBilling\", Int64.Type}, {\"Frequency\", type text}, {\"InvoiceId\", type any}, {\"InvoiceSectionId\", type any}, {\"InvoiceSectionName\", type text}, {\"IsAzureCreditEligible\", type logical}, {\"ResourceLocationNormalized\", type text}, {\"MeterCategory\", type text}, {\"MeterId\", type text}, {\"MeterName\", type text}, {\"MeterRegion\", type text}, {\"MeterSubCategory\", type text}, {\"OfferId\", type text}, {\"PaygCostInBillingCurrency\", type text}, {\"PaygCostInUsd\", type any}, {\"PaygPrice\", type number}, {\"PreviousInvoiceId\", type any}, {\"PricingCurrency\", type text}, {\"PricingModel\", type text}, {\"PartNumber\", type text}, {\"ProductId\", type any}, {\"ProductName\", type text}, {\"ProductOrderId\", type any}, {\"ProductOrderName\", type any}, {\"Provider\", type text}, {\"PublisherId\", type any}, {\"PublisherName\", type text}, {\"PublisherType\", type text}, {\"Quantity\", type number}, {\"ResellerMpnId\", type any}, {\"ResellerName\", type any}, {\"ResourceGroupName\", type text}, {\"ResourceId\", type text}, {\"ResourceLocation\", type text}, {\"ServiceFamily\", type text}, {\"ServiceInfo1\", type any}, {\"ServiceInfo2\", type text}, {\"ServicePeriodEndDate\", type any}, {\"ServicePeriodStartDate\", type date}, {\"SubscriptionId\", type text}, {\"SubscriptionName\", type text}, {\"Tags\", type text}, {\"Term\", type any}, {\"UnitOfMeasure\", type text}, {\"UnitPrice\", type number}}),",
        "    #\"Filter Rows by Date\" = Table.SelectRows(#\"Detect Column Types\", each [Date] >= Date.From(RangeStart) and [Date] < Date.From(RangeEnd)),",
        "    ",
        "    // Tags + TagsString (from CMConnector)",
        "    #\"Add TagsString\" = Table.AddColumn(#\"Filter Rows by Date\", \"TagsString\", each if [Tags] = null then \"{}\" else \"{\" & [Tags] & \"}\"),",
        "    #\"Remove Tags\" = Table.RemoveColumns(#\"Add TagsString\",{\"Tags\"}),",
        "    #\"Add Tags\" = Table.AddColumn(#\"Remove Tags\", \"Tags\", each [TagsString]),",
        "    #\"Parse Tags\" = Table.TransformColumns(#\"Add Tags\",{{\"Tags\", Json.Document}}),",
        "",
        "    // Extract AddlInfo for AHB (from CMConnector)",
        "    #\"Add AdditionalInfoDictionary\" = Table.AddColumn(#\"Parse Tags\", \"AdditionalInfoDictionary\", each if [AdditionalInfo] <> null and [AdditionalInfo] <> \"\" then [AdditionalInfo] else \"{}\"),",
        "    #\"Parse AdditionalInfoDictionary\" = Table.TransformColumns(#\"Add AdditionalInfoDictionary\",{{\"AdditionalInfoDictionary\", Json.Document}}),",
        "    #\"Replace AdditionalInfoDictionary Errors\" = Table.ReplaceErrorValues(#\"Parse AdditionalInfoDictionary\", {{\"AdditionalInfoDictionary\", null}}),",
        "    #\"Expand AdditionalInfoDictionary\" = Table.ExpandRecordColumn(#\"Replace AdditionalInfoDictionary Errors\", \"AdditionalInfoDictionary\", {\"UsageType\", \"ImageType\", \"ServiceType\", \"VMName\", \"VMProperties\", \"VCPUs\", \"CPUs\"}, {\"UsageType\", \"ImageType\", \"ServiceType\", \"VMName\", \"VMProperties\", \"VCPUs\", \"CPUs\"}),",
        "    #\"Change VCPUs Type\" = Table.TransformColumnTypes(#\"Expand AdditionalInfoDictionary\",{{\"VCPUs\", Int64.Type}}),",
        "    #\"Add CPUHours\" = Table.AddColumn(#\"Change VCPUs Type\", \"CPUHours\", each [VCPUs] * [Quantity], type number),",
        "    #\"Add AHB Status\" = Table.AddColumn(#\"Add CPUHours\", \"AHB Status\", each if [MeterSubCategory] = null then null else if Text.Contains([MeterSubCategory], \"Windows\") then \"Not enabled\" else if [ServiceInfo2] = null then null else if Text.Contains([ServiceInfo2], \"Windows Server BYOL\") then \"Enabled\" else \"Not supported\"),",
        "    #\"Add AHB vCPUs\" = Table.AddColumn(#\"Add AHB Status\", \"AHB vCPUs\", each if [VCPUs] = null then 0 else if [VCPUs] <= 8 then 8 else if [VCPUs] <= 16 then 16 else if [VCPUs] = 20 then 24 else if [VCPUs] > 20 then [VCPUs] else 0, Int64.Type),",
        "    #\"Added ResourceName\" = Table.AddColumn(#\"Add AHB vCPUs\", \"ResourceName\", each List.Last(Text.Split([ResourceId], \"/\"))),",
        "    #\"Add InstanceName\" = Table.AddColumn(#\"Added ResourceName\", \"InstanceName\", each if [VMName] = null then [ResourceName] else if [VMName] <> null then [VMName] else null),",
        "    #\"Rename ServiceType\" = Table.RenameColumns(#\"Add InstanceName\",{{\"ServiceType\", \"SKU\"}}),",
        "    #\"Add CompositeKey\" = Table.AddColumn(#\"Rename ServiceType\", \"CompositeKey\", each [SKU] & [MeterId]),",
        "    ",
        "    // Month column",
        "    #\"Add Month\" = Table.AddColumn(#\"Add CompositeKey\", \"Month\", each Date.StartOfMonth([Date])),",
        "",
        "    // Unique names",
        "    #\"Add CommitmentNameUnique\" = Table.AddColumn(#\"Add Month\", \"CommitmentNameUnique\", each if Text.Length([BenefitName]) = 0 then null else [BenefitName] & \" (\" & [BenefitId] & \")\"),",
        "    #\"Add ResourceNameUnique\" = Table.AddColumn(#\"Add CommitmentNameUnique\", \"ResourceNameUnique\", each if Text.Length([ResourceName]) = 0 then null else [ResourceName] & \" (\" & [ResourceId] & \")\"),",
        "    #\"Add ResourceGroupNameUnique\" = Table.AddColumn(#\"Add ResourceNameUnique\", \"ResourceGroupNameUnique\", each if Text.Length([ResourceGroupName]) = 0 then null else [ResourceGroupName] & \" (\" & [SubscriptionName] & \")\"),",
        "    #\"Add SubscriptionNameUnique\" = Table.AddColumn(#\"Add ResourceGroupNameUnique\", \"SubscriptionNameUnique\", each if Text.Length([SubscriptionName]) = 0 then null else [SubscriptionName] & \" (\" & [SubscriptionId] & \")\"),",
        "    ",
        "    // Commitment columns",
        "    #\"Add CommitmentType\" = Table.AddColumn(#\"Add SubscriptionNameUnique\", \"CommitmentType\", each if [PricingModel] = \"Reservation\" or [PricingModel] = \"SavingsPlan\" then [PricingModel] else null),",
        "    #\"Add CommitmentUtilizationAmount\" = Table.AddColumn(#\"Add CommitmentType\", \"CommitmentUtilizationAmount\", each if [ChargeType] = \"Usage\" and [PricingModel] = \"Reservation\" then [Quantity] else if [ChargeType] = \"Usage\" and [PricingModel] = \"SavingsPlan\" then [CostInBillingCurrency] else 0, type number),",
        "    #\"Add CommitmentUtilizationPotential\" = Table.AddColumn(#\"Add CommitmentUtilizationAmount\", \"CommitmentUtilizationPotential\", each if [PricingModel] = \"SavingsPlan\" then [CostInBillingCurrency] else if [PricingModel] = \"Reservation\" then [Quantity] else 0, type number),",
        "    // Savings columns",
        "    #\"Add RetailPrice\" = Table.AddColumn(#\"Add CommitmentUtilizationPotential\", \"RetailPrice\", each if [PaygPrice] > 0 then [PaygPrice] else [UnitPrice], type number),",
        "    #\"Add RetailCost\" = Table.AddColumn(#\"Add RetailPrice\", \"RetailCost\", each Number.Round([Quantity] * [RetailPrice], 8, RoundingMode.Down), type number),",
        "    #\"Add OnDemandCost\" = Table.AddColumn(#\"Add RetailCost\", \"OnDemandCost\", each Number.Round([Quantity] * [UnitPrice], 8, RoundingMode.Down), type number),",
        "    #\"Add CommitmentSavings\" = Table.AddColumn(#\"Add OnDemandCost\", \"CommitmentSavings\", each if [PricingModel] = \"OnDemand\" then 0 else if [ChargeType] = \"UnusedReservation\" or [ChargeType] = \"UnusedSavingsPlan\" then -[CostInBillingCurrency] else ([UnitPrice]-[EffectivePrice])*[Quantity], type number),",
        "    #\"Add DiscountSavings\" = Table.AddColumn(#\"Add CommitmentSavings\", \"DiscountSavings\", each if [ChargeType] = \"UnusedReservation\" or [ChargeType] = \"UnusedSavingsPlan\" then -[CostInBillingCurrency] else ([RetailPrice]-[EffectivePrice])*[Quantity], type number),",
        "    #\"Add NegotiatedSavings\" = Table.AddColumn(#\"Add DiscountSavings\", \"NegotiatedSavings\", each [DiscountSavings] - [CommitmentSavings], type number),",
        "    // Order columns",
        "    #\"Reorder Columns\" = Table.ReorderColumns(#\"Add NegotiatedSavings\", {\"Month\", \"Date\", \"PricingModel\", \"ChargeType\", \"CostInBillingCurrency\", \"OnDemandCost\", \"RetailCost\", \"DiscountSavings\", \"NegotiatedSavings\", \"CommitmentSavings\", \"UnitPrice\", \"EffectivePrice\", \"RetailPrice\", \"Quantity\", \"CommitmentUtilizationAmount\", \"CommitmentUtilizationPotential\", \"BillingAccountId\", \"BillingAccountName\", \"BillingProfileId\", \"BillingProfileName\", \"InvoiceSectionId\", \"InvoiceSectionName\", \"AccountOwnerId\", \"AccountName\", \"SubscriptionId\", \"SubscriptionName\", \"SubscriptionNameUnique\", \"ResourceGroupName\", \"ResourceGroupNameUnique\", \"ConsumedService\", \"ResourceId\", \"InstanceName\", \"ResourceNameUnique\", \"ResourceLocation\", \"Tags\", \"TagsString\", \"AdditionalInfo\", \"ServiceInfo1\", \"ServiceInfo2\", \"UsageType\", \"PublisherType\", \"PublisherName\", \"ProductName\", \"MeterCategory\", \"MeterSubCategory\", \"MeterId\", \"MeterName\", \"MeterRegion\", \"CostCenter\", \"OfferId\", \"ProductOrderId\", \"ProductOrderName\", \"UnitOfMeasure\", \"CommitmentNameUnique\", \"CommitmentType\", \"BenefitId\", \"BenefitName\", \"Term\", \"Frequency\", \"BillingPeriodStartDate\", \"BillingPeriodEndDate\"})",
        "in",
        "    #\"Reorder Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    // Ingest data from ADLS -- Copy \\\"storageUrlForPowerBI\\\" from hub deployment outputs\\r\\n    Source = AzureStorage.DataLake(StorageUrl),\\r\\n    #\\\"Filter Hidden Files1\\\" = Table.SelectRows(Source, each [Attributes]?[Hidden]? <> true),\\r\\n    #\\\"Add Metric\\\" = Table.AddColumn(#\\\"Filter Hidden Files1\\\", \\\"Metric\\\", each List.Last(List.RemoveLastN(Text.Split([Folder Path],\\\"/\\\"), 1))),\\r\\n    #\\\"Add Date Range\\\" = Table.AddColumn(#\\\"Add Metric\\\", \\\"Range\\\", each List.Last(List.RemoveLastN(List.RemoveLastN(Text.Split([Folder Path],\\\"/\\\"), 1), 1) )),\\r\\n    #\\\"Split Dates\\\" = Table.SplitColumn(#\\\"Add Date Range\\\", \\\"Range\\\", Splitter.SplitTextByDelimiter(\\\"-\\\", QuoteStyle.Csv), {\\\"StartDate\\\", \\\"EndDate\\\"}),\\r\\n    #\\\"Changed Date Type\\\" = Table.TransformColumnTypes(#\\\"Split Dates\\\",{{\\\"StartDate\\\", type date}, {\\\"EndDate\\\", type date}}),\\r\\n    #\\\"Filter Files by Metric and FileType\\\" = Table.SelectRows(#\\\"Changed Date Type\\\", each [Metric] = \\\"amortizedcost\\\" and [Extension] = FileType),\\r\\n    #\\\"Filtered Files by Date\\\" = Table.SelectRows(#\\\"Filter Files by Metric and FileType\\\", each [StartDate] >= Date.StartOfMonth(Date.From(RangeStart)) and [EndDate] <= Date.EndOfMonth(Date.From(RangeEnd))),\\r\\n    #\\\"Select Content\\\" = Table.SelectColumns(#\\\"Filtered Files by Date\\\",{\\\"Content\\\"}),\\r\\n    #\\\"Unpack Content\\\" = Table.AddColumn(#\\\"Select Content\\\", \\\"Custom\\\", each if FileType = \\\".gz\\\" then fnUnpackData([Content]) else Parquet.Document([Content])),\\r\\n    #\\\"Expanded Columns\\\" = Table.ExpandTableColumn(#\\\"Unpack Content\\\", \\\"Custom\\\", {\\\"InvoiceSectionName\\\", \\\"AccountName\\\", \\\"AccountOwnerId\\\", \\\"SubscriptionId\\\", \\\"SubscriptionName\\\", \\\"ResourceGroup\\\", \\\"ResourceLocation\\\", \\\"Date\\\", \\\"ProductName\\\", \\\"MeterCategory\\\", \\\"MeterSubCategory\\\", \\\"MeterId\\\", \\\"MeterName\\\", \\\"MeterRegion\\\", \\\"UnitOfMeasure\\\", \\\"Quantity\\\", \\\"EffectivePrice\\\", \\\"CostInBillingCurrency\\\", \\\"CostCenter\\\", \\\"ConsumedService\\\", \\\"ResourceId\\\", \\\"Tags\\\", \\\"OfferId\\\", \\\"AdditionalInfo\\\", \\\"ServiceInfo1\\\", \\\"ServiceInfo2\\\", \\\"ResourceName\\\", \\\"ReservationId\\\", \\\"ReservationName\\\", \\\"UnitPrice\\\", \\\"ProductOrderId\\\", \\\"ProductOrderName\\\", \\\"Term\\\", \\\"PublisherType\\\", \\\"PublisherName\\\", \\\"ChargeType\\\", \\\"Frequency\\\", \\\"PricingModel\\\", \\\"AvailabilityZone\\\", \\\"BillingAccountId\\\", \\\"BillingAccountName\\\", \\\"BillingCurrencyCode\\\", \\\"BillingPeriodStartDate\\\", \\\"BillingPeriodEndDate\\\", \\\"BillingProfileId\\\", \\\"BillingProfileName\\\", \\\"InvoiceSectionId\\\", \\\"IsAzureCreditEligible\\\", \\\"PartNumber\\\", \\\"PayGPrice\\\", \\\"PlanName\\\", \\\"ServiceFamily\\\", \\\"CostAllocationRuleName\\\", \\\"benefitId\\\", \\\"benefitName\\\"}, {\\\"InvoiceSectionName\\\", \\\"AccountName\\\", \\\"AccountOwnerId\\\", \\\"SubscriptionId\\\", \\\"SubscriptionName\\\", \\\"ResourceGroup\\\", \\\"ResourceLocation\\\", \\\"Date\\\", \\\"ProductName\\\", \\\"MeterCategory\\\", \\\"MeterSubCategory\\\", \\\"MeterId\\\", \\\"MeterName\\\", \\\"MeterRegion\\\", \\\"UnitOfMeasure\\\", \\\"Quantity\\\", \\\"EffectivePrice\\\", \\\"CostInBillingCurrency\\\", \\\"CostCenter\\\", \\\"ConsumedService\\\", \\\"ResourceId\\\", \\\"Tags\\\", \\\"OfferId\\\", \\\"AdditionalInfo\\\", \\\"ServiceInfo1\\\", \\\"ServiceInfo2\\\", \\\"ResourceName\\\", \\\"ReservationId\\\", \\\"ReservationName\\\", \\\"UnitPrice\\\", \\\"ProductOrderId\\\", \\\"ProductOrderName\\\", \\\"Term\\\", \\\"PublisherType\\\", \\\"PublisherName\\\", \\\"ChargeType\\\", \\\"Frequency\\\", \\\"PricingModel\\\", \\\"AvailabilityZone\\\", \\\"BillingAccountId\\\", \\\"BillingAccountName\\\", \\\"BillingCurrencyCode\\\", \\\"BillingPeriodStartDate\\\", \\\"BillingPeriodEndDate\\\", \\\"BillingProfileId\\\", \\\"BillingProfileName\\\", \\\"InvoiceSectionId\\\", \\\"IsAzureCreditEligible\\\", \\\"PartNumber\\\", \\\"PayGPrice\\\", \\\"PlanName\\\", \\\"ServiceFamily\\\", \\\"CostAllocationRuleName\\\", \\\"benefitId\\\", \\\"benefitName\\\"}),\\r\\n    #\\\"Removed Content\\\" = Table.RemoveColumns(#\\\"Expanded Columns\\\",{\\\"Content\\\"}),\\r\\n    #\\\"Replaced Value\\\" = Table.ReplaceValue(#\\\"Removed Content\\\",null,\\\"\\\",Replacer.ReplaceValue,{\\\"InvoiceSectionName\\\", \\\"AccountName\\\", \\\"AccountOwnerId\\\", \\\"SubscriptionId\\\", \\\"SubscriptionName\\\", \\\"ResourceGroup\\\", \\\"ResourceLocation\\\", \\\"Date\\\", \\\"ProductName\\\", \\\"MeterCategory\\\", \\\"MeterSubCategory\\\", \\\"MeterId\\\", \\\"MeterName\\\", \\\"MeterRegion\\\", \\\"UnitOfMeasure\\\", \\\"Quantity\\\", \\\"EffectivePrice\\\", \\\"CostInBillingCurrency\\\", \\\"CostCenter\\\", \\\"ConsumedService\\\", \\\"ResourceId\\\", \\\"Tags\\\", \\\"OfferId\\\", \\\"AdditionalInfo\\\", \\\"ServiceInfo1\\\", \\\"ServiceInfo2\\\", \\\"ResourceName\\\", \\\"ReservationId\\\", \\\"ReservationName\\\", \\\"UnitPrice\\\", \\\"ProductOrderId\\\", \\\"ProductOrderName\\\", \\\"Term\\\", \\\"PublisherType\\\", \\\"PublisherName\\\", \\\"ChargeType\\\", \\\"Frequency\\\", \\\"PricingModel\\\", \\\"AvailabilityZone\\\", \\\"BillingAccountId\\\", \\\"BillingAccountName\\\", \\\"BillingCurrencyCode\\\", \\\"BillingPeriodStartDate\\\", \\\"BillingPeriodEndDate\\\", \\\"BillingProfileId\\\", \\\"BillingProfileName\\\", \\\"InvoiceSectionId\\\", \\\"IsAzureCreditEligible\\\", \\\"PartNumber\\\", \\\"PayGPrice\\\", \\\"PlanName\\\", \\\"ServiceFamily\\\", \\\"CostAllocationRuleName\\\", \\\"benefitId\\\", \\\"benefitName\\\"}),\\r\\n    #\\\"Detect Column Types\\\" = Table.TransformColumnTypes(#\\\"Replaced Value\\\",{{\\\"InvoiceSectionName\\\", type text}, {\\\"AccountName\\\", type text}, {\\\"AccountOwnerId\\\", type text}, {\\\"SubscriptionId\\\", type text}, {\\\"SubscriptionName\\\", type text}, {\\\"ResourceGroup\\\", type text}, {\\\"ResourceLocation\\\", type text}, {\\\"Date\\\", type date}, {\\\"ProductName\\\", type text}, {\\\"MeterCategory\\\", type text}, {\\\"MeterSubCategory\\\", type text}, {\\\"MeterId\\\", type text}, {\\\"MeterName\\\", type text}, {\\\"MeterRegion\\\", type text}, {\\\"UnitOfMeasure\\\", type text}, {\\\"Quantity\\\", type number}, {\\\"EffectivePrice\\\", type number}, {\\\"CostInBillingCurrency\\\", type number}, {\\\"CostCenter\\\", type text}, {\\\"ConsumedService\\\", type text}, {\\\"ResourceId\\\", type text}, {\\\"Tags\\\", type text}, {\\\"OfferId\\\", type text}, {\\\"AdditionalInfo\\\", type text}, {\\\"ServiceInfo1\\\", type any}, {\\\"ServiceInfo2\\\", type text}, {\\\"ResourceName\\\", type text}, {\\\"ReservationId\\\", type any}, {\\\"ReservationName\\\", type any}, {\\\"UnitPrice\\\", type number}, {\\\"ProductOrderId\\\", type any}, {\\\"ProductOrderName\\\", type any}, {\\\"Term\\\", type any}, {\\\"PublisherType\\\", type text}, {\\\"PublisherName\\\", type text}, {\\\"ChargeType\\\", type text}, {\\\"Frequency\\\", type text}, {\\\"PricingModel\\\", type text}, {\\\"AvailabilityZone\\\", type any}, {\\\"BillingAccountId\\\", Int64.Type}, {\\\"BillingAccountName\\\", type text}, {\\\"BillingCurrencyCode\\\", type text}, {\\\"BillingPeriodStartDate\\\", type date}, {\\\"BillingPeriodEndDate\\\", type date}, {\\\"BillingProfileId\\\", Int64.Type}, {\\\"BillingProfileName\\\", type text}, {\\\"InvoiceSectionId\\\", type any}, {\\\"IsAzureCreditEligible\\\", type logical}, {\\\"PartNumber\\\", type text}, {\\\"PayGPrice\\\", type number}, {\\\"PlanName\\\", type text}, {\\\"ServiceFamily\\\", type text}, {\\\"CostAllocationRuleName\\\", type any}, {\\\"benefitId\\\", type any}, {\\\"benefitName\\\", type any}}),\\r\\n    #\\\"Filter Rows by Date\\\" = Table.SelectRows(#\\\"Detect Column Types\\\", each [Date] >= Date.From(RangeStart) and [Date] < Date.From(RangeEnd)),\\r\\n    \\r\\n    // Tags + TagsString (from CMConnector)\\r\\n    #\\\"Add TagsString\\\" = Table.AddColumn(#\\\"Filter Rows by Date\\\", \\\"TagsString\\\", each \\\"{\\\" & [Tags] & \\\"}\\\"),\\r\\n    #\\\"Remove Tags\\\" = Table.RemoveColumns(#\\\"Add TagsString\\\",{\\\"Tags\\\"}),\\r\\n    #\\\"Add Tags\\\" = Table.AddColumn(#\\\"Remove Tags\\\", \\\"Tags\\\", each [TagsString]),\\r\\n    #\\\"Parse Tags\\\" = Table.TransformColumns(#\\\"Add Tags\\\",{{\\\"Tags\\\", Json.Document}}),\\r\\n\\r\\n    // Extract AddlInfo for AHB (from CMConnector)\\r\\n    #\\\"Add AdditionalInfoDictionary\\\" = Table.AddColumn(#\\\"Parse Tags\\\", \\\"AdditionalInfoDictionary\\\", each if [AdditionalInfo] <> null and [AdditionalInfo] <> \\\"\\\" then [AdditionalInfo] else \\\"{}\\\"),\\r\\n    #\\\"Parse AdditionalInfoDictionary\\\" = Table.TransformColumns(#\\\"Add AdditionalInfoDictionary\\\",{{\\\"AdditionalInfoDictionary\\\", Json.Document}}),\\r\\n    #\\\"Replace AdditionalInfoDictionary Errors\\\" = Table.ReplaceErrorValues(#\\\"Parse AdditionalInfoDictionary\\\", {{\\\"AdditionalInfoDictionary\\\", null}}),\\r\\n    #\\\"Expand AdditionalInfoDictionary\\\" = Table.ExpandRecordColumn(#\\\"Replace AdditionalInfoDictionary Errors\\\", \\\"AdditionalInfoDictionary\\\", {\\\"UsageType\\\", \\\"ImageType\\\", \\\"ServiceType\\\", \\\"VMName\\\", \\\"VMProperties\\\", \\\"VCPUs\\\", \\\"CPUs\\\"}, {\\\"UsageType\\\", \\\"ImageType\\\", \\\"ServiceType\\\", \\\"VMName\\\", \\\"VMProperties\\\", \\\"VCPUs\\\", \\\"CPUs\\\"}),\\r\\n    #\\\"Change VCPUs Type\\\" = Table.TransformColumnTypes(#\\\"Expand AdditionalInfoDictionary\\\",{{\\\"VCPUs\\\", Int64.Type}}),\\r\\n    #\\\"Add CPUHours\\\" = Table.AddColumn(#\\\"Change VCPUs Type\\\", \\\"CPUHours\\\", each [VCPUs] * [Quantity]),\\r\\n    #\\\"Change AHB Type\\\" = Table.TransformColumnTypes(#\\\"Add CPUHours\\\",{{\\\"CPUHours\\\", type number}}),\\r\\n    #\\\"Add AHB Status\\\" = Table.AddColumn(#\\\"Change AHB Type\\\", \\\"AHB Status\\\", each if Text.Contains([MeterSubCategory], \\\"Windows\\\") then \\\"Not enabled\\\" else if Text.Contains([ServiceInfo2], \\\"Windows Server BYOL\\\") then \\\"Enabled\\\" else \\\"Not supported\\\"),\\r\\n    #\\\"Add AHB vCPUs\\\" = Table.AddColumn(#\\\"Add AHB Status\\\", \\\"AHB vCPUs\\\", each if [VCPUs] = null then 0 else if [VCPUs] <= 8 then 8 else if [VCPUs] <= 16 then 16 else if [VCPUs] = 20 then 24 else if [VCPUs] > 20 then [VCPUs] else 0),\\r\\n    #\\\"Change AHB vCPUs Type\\\" = Table.TransformColumnTypes(#\\\"Add AHB vCPUs\\\",{{\\\"AHB vCPUs\\\", Int64.Type}}),\\r\\n    #\\\"Add InstanceName\\\" = Table.AddColumn(#\\\"Change AHB vCPUs Type\\\", \\\"InstanceName\\\", each if [VMName] = null then [ResourceName] else if [VMName] <> null then [VMName] else null),\\r\\n    #\\\"Rename ServiceType\\\" = Table.RenameColumns(#\\\"Add InstanceName\\\",{{\\\"ServiceType\\\", \\\"SKU\\\"}}),\\r\\n    #\\\"Add CompositeKey\\\" = Table.AddColumn(#\\\"Rename ServiceType\\\", \\\"CompositeKey\\\", each [SKU] & [MeterId]),\\r\\n    \\r\\n    // Month column\\r\\n    #\\\"Add Month\\\" = Table.AddColumn(#\\\"Add CompositeKey\\\", \\\"Month\\\", each Date.StartOfMonth([Date])),\\r\\n\\r\\n    // Unique names\\r\\n    #\\\"Add CommitmentNameUnique\\\" = Table.AddColumn(#\\\"Add Month\\\", \\\"CommitmentNameUnique\\\", each if Text.Length([benefitName]) = 0 then null else [benefitName] & \\\" (\\\" & [benefitId] & \\\")\\\"),\\r\\n    #\\\"Add ResourceNameUnique\\\" = Table.AddColumn(#\\\"Add CommitmentNameUnique\\\", \\\"ResourceNameUnique\\\", each if Text.Length([ResourceName]) = 0 then null else [ResourceName] & \\\" (\\\" & [ResourceId] & \\\")\\\"),\\r\\n    #\\\"Add ResourceGroupNameUnique\\\" = Table.AddColumn(#\\\"Add ResourceNameUnique\\\", \\\"ResourceGroupNameUnique\\\", each if Text.Length([ResourceGroup]) = 0 then null else [ResourceGroup] & \\\" (\\\" & [SubscriptionName] & \\\")\\\"),\\r\\n    #\\\"Add SubscriptionNameUnique\\\" = Table.AddColumn(#\\\"Add ResourceGroupNameUnique\\\", \\\"SubscriptionNameUnique\\\", each if Text.Length([SubscriptionName]) = 0 then null else [SubscriptionName] & \\\" (\\\" & [SubscriptionId] & \\\")\\\"),\\r\\n    \\r\\n    // Commitment columns\\r\\n    #\\\"Add CommitmentType\\\" = Table.AddColumn(#\\\"Add SubscriptionNameUnique\\\", \\\"CommitmentType\\\", each if [PricingModel] = \\\"Reservation\\\" or [PricingModel] = \\\"SavingsPlan\\\" then [PricingModel] else null),\\r\\n    #\\\"Add CommitmentUtilizationAmount\\\" = Table.AddColumn(#\\\"Add CommitmentType\\\", \\\"CommitmentUtilizationAmount\\\", each if [ChargeType] = \\\"Usage\\\" and [PricingModel] = \\\"Reservation\\\" then [Quantity] else if [ChargeType] = \\\"Usage\\\" and [PricingModel] = \\\"SavingsPlan\\\" then [CostInBillingCurrency] else 0),\\r\\n    #\\\"Add CommitmentUtilizationPotential\\\" = Table.AddColumn(#\\\"Add CommitmentUtilizationAmount\\\", \\\"CommitmentUtilizationPotential\\\", each if [PricingModel] = \\\"SavingsPlan\\\" then [CostInBillingCurrency] else if [PricingModel] = \\\"Reservation\\\" then [Quantity] else 0),\\r\\n    #\\\"Change CommitmentUtilization Types\\\" = Table.TransformColumnTypes(#\\\"Add CommitmentUtilizationPotential\\\",{{\\\"CommitmentUtilizationAmount\\\", type number}, {\\\"CommitmentUtilizationPotential\\\", type number}}),\\r\\n\\r\\n    // Savings columns\\r\\n    #\\\"Add RetailPrice\\\" = Table.AddColumn(#\\\"Change CommitmentUtilization Types\\\", \\\"RetailPrice\\\", each if [PayGPrice] > 0 then [PayGPrice] else [UnitPrice]),\\r\\n    #\\\"Add RetailCost\\\" = Table.AddColumn(#\\\"Add RetailPrice\\\", \\\"RetailCost\\\", each Number.Round([Quantity] * [RetailPrice], 8, RoundingMode.Down)),\\r\\n    #\\\"Add OnDemandCost\\\" = Table.AddColumn(#\\\"Add RetailCost\\\", \\\"OnDemandCost\\\", each Number.Round([Quantity] * [UnitPrice], 8, RoundingMode.Down)),\\r\\n    #\\\"Add CommitmentSavings\\\" = Table.AddColumn(#\\\"Add OnDemandCost\\\", \\\"CommitmentSavings\\\", each if [PricingModel] = \\\"OnDemand\\\" then 0 else if [ChargeType] = \\\"UnusedReservation\\\" or [ChargeType] = \\\"UnusedSavingsPlan\\\" then -[CostInBillingCurrency] else ([UnitPrice]-[EffectivePrice])*[Quantity]),\\r\\n    #\\\"Add DiscountSavings\\\" = Table.AddColumn(#\\\"Add CommitmentSavings\\\", \\\"DiscountSavings\\\", each if [ChargeType] = \\\"UnusedReservation\\\" or [ChargeType] = \\\"UnusedSavingsPlan\\\" then -[CostInBillingCurrency] else ([RetailPrice]-[EffectivePrice])*[Quantity]),\\r\\n    #\\\"Add NegotiatedSavings\\\" = Table.AddColumn(#\\\"Add DiscountSavings\\\", \\\"NegotiatedSavings\\\", each [DiscountSavings] - [CommitmentSavings]),\\r\\n    #\\\"Change Savings Types\\\" = Table.TransformColumnTypes(#\\\"Add NegotiatedSavings\\\",{{\\\"RetailPrice\\\", type number}, {\\\"RetailCost\\\", type number}, {\\\"OnDemandCost\\\", type number}, {\\\"CommitmentSavings\\\", type number}, {\\\"DiscountSavings\\\", type number}, {\\\"NegotiatedSavings\\\", type number}}),\\r\\n\\r\\n    // Order columns\\r\\n    #\\\"Reorder Columns\\\" = Table.ReorderColumns(#\\\"Change Savings Types\\\", {\\\"Month\\\", \\\"Date\\\", \\\"PricingModel\\\", \\\"ChargeType\\\", \\\"CostInBillingCurrency\\\", \\\"OnDemandCost\\\", \\\"RetailCost\\\", \\\"DiscountSavings\\\", \\\"NegotiatedSavings\\\", \\\"CommitmentSavings\\\", \\\"UnitPrice\\\", \\\"EffectivePrice\\\", \\\"RetailPrice\\\", \\\"Quantity\\\", \\\"CommitmentUtilizationAmount\\\", \\\"CommitmentUtilizationPotential\\\", \\\"BillingAccountId\\\", \\\"BillingAccountName\\\", \\\"BillingProfileId\\\", \\\"BillingProfileName\\\", \\\"InvoiceSectionId\\\", \\\"InvoiceSectionName\\\", \\\"AccountOwnerId\\\", \\\"AccountName\\\", \\\"SubscriptionId\\\", \\\"SubscriptionName\\\", \\\"SubscriptionNameUnique\\\", \\\"ResourceGroup\\\", \\\"ResourceGroupNameUnique\\\", \\\"ConsumedService\\\", \\\"ResourceId\\\", \\\"InstanceName\\\", \\\"ResourceNameUnique\\\", \\\"ResourceLocation\\\", \\\"AvailabilityZone\\\", \\\"Tags\\\", \\\"TagsString\\\", \\\"AdditionalInfo\\\", \\\"ServiceInfo1\\\", \\\"ServiceInfo2\\\", \\\"UsageType\\\", \\\"PublisherType\\\", \\\"PublisherName\\\", \\\"ProductName\\\", \\\"MeterCategory\\\", \\\"MeterSubCategory\\\", \\\"MeterId\\\", \\\"MeterName\\\", \\\"MeterRegion\\\", \\\"CostCenter\\\", \\\"OfferId\\\", \\\"ProductOrderId\\\", \\\"ProductOrderName\\\", \\\"UnitOfMeasure\\\", \\\"CommitmentNameUnique\\\", \\\"CommitmentType\\\", \\\"ReservationId\\\", \\\"ReservationName\\\", \\\"benefitId\\\", \\\"benefitName\\\", \\\"Term\\\", \\\"Frequency\\\", \\\"BillingPeriodStartDate\\\", \\\"BillingPeriodEndDate\\\"})\\r\\nin\\r\\n    #\\\"Reorder Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "FinOps toolkit",
      "id": "03957bab-f654-4839-8b10-e8998be77d2a",
      "description": ""
    },
    {
      "name": "CM Connector",
      "id": "52f75cc9-a166-4263-8708-e2fe5b53515d",
      "order": 1,
      "description": ""
    }
  ],
  "culture": "en-US",
  "firewallEnabled": true
}